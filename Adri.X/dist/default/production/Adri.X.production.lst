

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Dec 19 14:36:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  000EF4                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _add_passo
    83  000EF4  18                 	db	24
    84                           
    85                           ;initializer for _add_u_minuto
    86  000EF5  0E                 	db	14
    87                           
    88                           ;initializer for _add_d_minuto
    89  000EF6  09                 	db	9
    90                           
    91                           ;initializer for _add_u_hora
    92  000EF7  04                 	db	4
    93                           
    94                           	psect	nvCOMRAM
    95  00003A                     __pnvCOMRAM:
    96                           	opt stack 0
    97  00003A                     _Hora:
    98                           	opt stack 0
    99  00003A                     	ds	1
   100  00003B                     _Min:
   101                           	opt stack 0
   102  00003B                     	ds	1
   103  0000                     _TMR0	set	4054
   104  0000                     _RCREG	set	4014
   105  0000                     _PORTBbits	set	3969
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RCONbits	set	4048
   108  0000                     _PIE1bits	set	3997
   109  0000                     _SPBRG	set	4015
   110  0000                     _RCSTA	set	4011
   111  0000                     _TXSTA	set	4012
   112  0000                     _TRISCbits	set	3988
   113  0000                     _ADCON1	set	4033
   114  0000                     _PORTA	set	3968
   115  0000                     _LATBbits	set	3978
   116  0000                     _TRISB	set	3987
   117  0000                     _INTCON	set	4082
   118  0000                     _T0CON	set	4053
   119  0000                     _TRISDbits	set	3989
   120  0000                     _TRISAbits	set	3986
   121  0000                     _TXREG	set	4013
   122  0000                     _PIR2bits	set	4001
   123  0000                     _EECON2	set	4007
   124  0000                     _INTCONbits	set	4082
   125  0000                     _EECON1bits	set	4006
   126  0000                     _EEDATA	set	4008
   127  0000                     _EEADR	set	4009
   128  0000                     _PORTDbits	set	3971
   129  0000                     _PORTAbits	set	3968
   130  0000                     _RCIF	set	31989
   131  0000                     _INT0IF	set	32657
   132  0000                     _INTEDG0	set	32654
   133  0000                     _INT0IE	set	32660
   134  0000                     _RBPU	set	32655
   135  0000                     _TMR0IF	set	32658
   136  0000                     _TMR0ON	set	32431
   137  0000                     _TXIF	set	31988
   138                           
   139                           ; #config settings
   140  0000                     
   141                           	psect	cinit
   142  000D98                     __pcinit:
   143                           	opt stack 0
   144  000D98                     start_initialization:
   145                           	opt stack 0
   146  000D98                     __initialization:
   147                           	opt stack 0
   148                           
   149                           ; Initialize objects allocated to COMRAM (4 bytes)
   150                           ; load TBLPTR registers with __pidataCOMRAM
   151  000D98  0EF4               	movlw	low __pidataCOMRAM
   152  000D9A  6EF6               	movwf	tblptrl,c
   153  000D9C  0E0E               	movlw	high __pidataCOMRAM
   154  000D9E  6EF7               	movwf	tblptrh,c
   155  000DA0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   156  000DA2  6EF8               	movwf	tblptru,c
   157  000DA4  EE00  F036         	lfsr	0,__pdataCOMRAM
   158  000DA8  EE10 F004          	lfsr	1,4
   159  000DAC                     copy_data0:
   160  000DAC  0009               	tblrd		*+
   161  000DAE  CFF5 FFEE          	movff	tablat,postinc0
   162  000DB2  50E5               	movf	postdec1,w,c
   163  000DB4  50E1               	movf	fsr1l,w,c
   164  000DB6  E1FA               	bnz	copy_data0
   165                           
   166                           ; Clear objects allocated to BANK0 (20 bytes)
   167  000DB8  EE00  F060         	lfsr	0,__pbssBANK0
   168  000DBC  0E14               	movlw	20
   169  000DBE                     clear_0:
   170  000DBE  6AEE               	clrf	postinc0,c
   171  000DC0  06E8               	decf	wreg,f,c
   172  000DC2  E1FD               	bnz	clear_0
   173                           
   174                           ; Clear objects allocated to COMRAM (18 bytes)
   175  000DC4  EE00  F024         	lfsr	0,__pbssCOMRAM
   176  000DC8  0E12               	movlw	18
   177  000DCA                     clear_1:
   178  000DCA  6AEE               	clrf	postinc0,c
   179  000DCC  06E8               	decf	wreg,f,c
   180  000DCE  E1FD               	bnz	clear_1
   181  000DD0                     end_of_initialization:
   182                           	opt stack 0
   183  000DD0                     __end_of__initialization:
   184                           	opt stack 0
   185  000DD0  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  000DD2  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  000DD4  0100               	movlb	0
   188  000DD6  EF38  F007         	goto	_main	;jump to C main() function
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	bssCOMRAM
   199  000024                     __pbssCOMRAM:
   200                           	opt stack 0
   201  000024                     _string:
   202                           	opt stack 0
   203  000024                     	ds	5
   204  000029                     _pendencia_remedio:
   205                           	opt stack 0
   206  000029                     	ds	4
   207  00002D                     _add_d_hora:
   208                           	opt stack 0
   209  00002D                     	ds	1
   210  00002E                     _seg:
   211                           	opt stack 0
   212  00002E                     	ds	1
   213  00002F                     _botao:
   214                           	opt stack 0
   215  00002F                     	ds	1
   216  000030                     _led:
   217                           	opt stack 0
   218  000030                     	ds	1
   219  000031                     _dado:
   220                           	opt stack 0
   221  000031                     	ds	1
   222  000032                     _flag:
   223                           	opt stack 0
   224  000032                     	ds	1
   225  000033                     _libera:
   226                           	opt stack 0
   227  000033                     	ds	1
   228  000034                     _in:
   229                           	opt stack 0
   230  000034                     	ds	1
   231  000035                     _i:
   232                           	opt stack 0
   233  000035                     	ds	1
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           postdec1	equ	0xFE5
   241                           fsr1l	equ	0xFE1
   242                           
   243                           	psect	dataCOMRAM
   244  000036                     __pdataCOMRAM:
   245                           	opt stack 0
   246  000036                     _add_passo:
   247                           	opt stack 0
   248  000036                     	ds	1
   249  000037                     _add_u_minuto:
   250                           	opt stack 0
   251  000037                     	ds	1
   252  000038                     _add_d_minuto:
   253                           	opt stack 0
   254  000038                     	ds	1
   255  000039                     _add_u_hora:
   256                           	opt stack 0
   257  000039                     	ds	1
   258                           tblptru	equ	0xFF8
   259                           tblptrh	equ	0xFF7
   260                           tblptrl	equ	0xFF6
   261                           tablat	equ	0xFF5
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           postdec1	equ	0xFE5
   265                           fsr1l	equ	0xFE1
   266                           
   267                           	psect	bssBANK0
   268  000060                     __pbssBANK0:
   269                           	opt stack 0
   270  000060                     _remedio:
   271                           	opt stack 0
   272  000060                     	ds	20
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           postdec1	equ	0xFE5
   280                           fsr1l	equ	0xFE1
   281                           
   282                           	psect	cstackBANK0
   283  000074                     __pcstackBANK0:
   284                           	opt stack 0
   285  000074                     ??_controle_servo:
   286  000074                     ?___awdiv:
   287                           	opt stack 0
   288  000074                     ?___awmod:
   289                           	opt stack 0
   290  000074                     le_eeprom@address:
   291                           	opt stack 0
   292  000074                     ___awdiv@dividend:
   293                           	opt stack 0
   294  000074                     ___awmod@dividend:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x0
   298  000074                     	ds	2
   299  000076                     atualiza_variaveis@count:
   300                           	opt stack 0
   301  000076                     controle_servo@numero_do_remedio:
   302                           	opt stack 0
   303  000076                     ___awdiv@divisor:
   304                           	opt stack 0
   305  000076                     ___awmod@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x2
   309  000076                     	ds	2
   310  000078                     ___awdiv@counter:
   311                           	opt stack 0
   312  000078                     ___awmod@counter:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x4
   316  000078                     	ds	1
   317  000079                     ___awdiv@sign:
   318                           	opt stack 0
   319  000079                     ___awmod@sign:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0x5
   323  000079                     	ds	1
   324  00007A                     ___awdiv@quotient:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x6
   328  00007A                     	ds	2
   329  00007C                     grava_eeprom@address:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x8
   333  00007C                     	ds	2
   334  00007E                     grava_eeprom@data:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0xA
   338  00007E                     	ds	1
   339  00007F                     ??_grava_eeprom:
   340                           
   341                           ; 1 bytes @ 0xB
   342  00007F                     	ds	1
   343  000080                     ??_atualiza_remedio:
   344                           
   345                           ; 1 bytes @ 0xC
   346  000080                     	ds	3
   347  000083                     atualiza_remedio@dados:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0xF
   351  000083                     	ds	1
   352  000084                     atualiza_remedio@count:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x10
   356  000084                     	ds	1
   357  000085                     
   358                           ; 1 bytes @ 0x11
   359  000085                     	ds	1
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1l	equ	0xFE1
   368                           
   369                           	psect	cstackCOMRAM
   370  000001                     __pcstackCOMRAM:
   371                           	opt stack 0
   372  000001                     ?i2___awdiv:
   373                           	opt stack 0
   374  000001                     ?i2___awmod:
   375                           	opt stack 0
   376  000001                     enviaDados@dados:
   377                           	opt stack 0
   378  000001                     i2le_eeprom@address:
   379                           	opt stack 0
   380  000001                     i2___awdiv@dividend:
   381                           	opt stack 0
   382  000001                     i2___awmod@dividend:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x0
   386  000001                     	ds	1
   387  000002                     envia_dados_da_memoria@indice:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x1
   391  000002                     	ds	1
   392  000003                     i2___awdiv@divisor:
   393                           	opt stack 0
   394  000003                     i2___awmod@divisor:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x2
   398  000003                     	ds	2
   399  000005                     i2___awdiv@counter:
   400                           	opt stack 0
   401  000005                     i2___awmod@counter:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x4
   405  000005                     	ds	1
   406  000006                     i2___awdiv@sign:
   407                           	opt stack 0
   408  000006                     i2___awmod@sign:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x5
   412  000006                     	ds	1
   413  000007                     i2___awdiv@quotient:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x6
   417  000007                     	ds	2
   418  000009                     ??_verifica:
   419  000009                     i2grava_eeprom@address:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x8
   423  000009                     	ds	2
   424  00000B                     verifica@count:
   425                           	opt stack 0
   426  00000B                     i2grava_eeprom@data:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0xA
   430  00000B                     	ds	1
   431  00000C                     ??i2_grava_eeprom:
   432                           
   433                           ; 1 bytes @ 0xB
   434  00000C                     	ds	1
   435  00000D                     ??_atualiza_relogio_blue:
   436  00000D                     
   437                           ; 1 bytes @ 0xC
   438  00000D                     	ds	2
   439  00000F                     atualiza_relogio_blue@i:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0xE
   443  00000F                     	ds	1
   444  000010                     ??_comunica:
   445                           
   446                           ; 1 bytes @ 0xF
   447  000010                     	ds	1
   448  000011                     ??_serial:
   449                           
   450                           ; 1 bytes @ 0x10
   451  000011                     	ds	19
   452  000024                     tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           postdec1	equ	0xFE5
   459                           fsr1l	equ	0xFE1
   460                           
   461                           ; 1 bytes @ 0x23
   462 ;;
   463 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   464 ;;
   465 ;; *************** function _main *****************
   466 ;; Defined at:
   467 ;;		line 3 in file "codigo_adri.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;		None
   470 ;; Auto vars:     Size  Location     Type
   471 ;;		None
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   481 ;;      Params:         0       0       0       0       0       0       0       0       0
   482 ;;      Locals:         0       0       0       0       0       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0       0       0       0       0
   484 ;;      Totals:         0       0       0       0       0       0       0       0       0
   485 ;;Total ram usage:        0 bytes
   486 ;; Hardware stack levels required when called:    7
   487 ;; This function calls:
   488 ;;		_aciona
   489 ;;		_atualiza_relogio
   490 ;;		_atualiza_variaveis
   491 ;;		_configura_pic
   492 ;;		_configura_uart
   493 ;;		_controle_servo
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  000E70                     __ptext0:
   501                           	opt stack 0
   502  000E70                     _main:
   503                           	opt stack 24
   504                           
   505                           ;codigo_adri.c: 5: configura_pic();
   506                           
   507                           ;incstack = 0
   508  000E70  ECED  F006         	call	_configura_pic	;wreg free
   509                           
   510                           ;codigo_adri.c: 6: configura_uart();
   511  000E74  EC58  F007         	call	_configura_uart	;wreg free
   512                           
   513                           ;codigo_adri.c: 7: atualiza_relogio();
   514  000E78  EC74  F006         	call	_atualiza_relogio	;wreg free
   515                           
   516                           ;codigo_adri.c: 8: atualiza_variaveis();
   517  000E7C  ECCE  F003         	call	_atualiza_variaveis	;wreg free
   518  000E80                     
   519                           ;codigo_adri.c: 10: {
   520                           ;codigo_adri.c: 11: controle_servo(0);
   521  000E80  0E00               	movlw	0
   522  000E82  ECAD  F002         	call	_controle_servo
   523                           
   524                           ;codigo_adri.c: 12: if(libera == 1)
   525  000E86  0433               	decf	_libera,w,c
   526  000E88  A4D8               	btfss	status,2,c
   527  000E8A  D7FA               	goto	l53
   528                           
   529                           ;codigo_adri.c: 13: {
   530                           ;codigo_adri.c: 14: aciona();
   531  000E8C  ECA1  F006         	call	_aciona	;wreg free
   532  000E90  D7F7               	goto	l53
   533  000E92                     __end_of_main:
   534                           	opt stack 0
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           status	equ	0xFD8
   544                           
   545 ;; *************** function _configura_uart *****************
   546 ;; Defined at:
   547 ;;		line 178 in file "funcs.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   561 ;;      Params:         0       0       0       0       0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0       0       0       0       0
   564 ;;      Totals:         0       0       0       0       0       0       0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    4
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text1
   576  000EB0                     __ptext1:
   577                           	opt stack 0
   578  000EB0                     _configura_uart:
   579                           	opt stack 26
   580                           
   581                           ;funcs.c: 180: TRISCbits.RC6 = 0;
   582                           
   583                           ;incstack = 0
   584  000EB0  9C94               	bcf	3988,6,c	;volatile
   585                           
   586                           ;funcs.c: 181: TRISCbits.RC7 = 1;
   587  000EB2  8E94               	bsf	3988,7,c	;volatile
   588                           
   589                           ;funcs.c: 182: TXSTA = 0x20;
   590  000EB4  0E20               	movlw	32
   591  000EB6  6EAC               	movwf	4012,c	;volatile
   592                           
   593                           ;funcs.c: 183: RCSTA = 0x90;
   594  000EB8  0E90               	movlw	144
   595  000EBA  6EAB               	movwf	4011,c	;volatile
   596                           
   597                           ;funcs.c: 184: SPBRG = 0x4D;
   598  000EBC  0E4D               	movlw	77
   599  000EBE  6EAF               	movwf	4015,c	;volatile
   600                           
   601                           ;funcs.c: 185: PIE1bits.RCIE = 1;
   602  000EC0  8A9D               	bsf	3997,5,c	;volatile
   603                           
   604                           ;funcs.c: 186: RCONbits.IPEN = 0;
   605  000EC2  9ED0               	bcf	4048,7,c	;volatile
   606                           
   607                           ;funcs.c: 187: INTCONbits.GIE = 1;
   608  000EC4  8EF2               	bsf	intcon,7,c	;volatile
   609                           
   610                           ;funcs.c: 188: INTCONbits.PEIE = 1;
   611  000EC6  8CF2               	bsf	intcon,6,c	;volatile
   612                           
   613                           ;funcs.c: 189: PIR1bits.RCIF = 0;
   614  000EC8  9A9E               	bcf	3998,5,c	;volatile
   615  000ECA  0012               	return		;funcret
   616  000ECC                     __end_of_configura_uart:
   617                           	opt stack 0
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           intcon	equ	0xFF2
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           status	equ	0xFD8
   628                           
   629 ;; *************** function _configura_pic *****************
   630 ;; Defined at:
   631 ;;		line 154 in file "funcs.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;		None
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, status,2
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   645 ;;      Params:         0       0       0       0       0       0       0       0       0
   646 ;;      Locals:         0       0       0       0       0       0       0       0       0
   647 ;;      Temps:          0       0       0       0       0       0       0       0       0
   648 ;;      Totals:         0       0       0       0       0       0       0       0       0
   649 ;;Total ram usage:        0 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; Hardware stack levels required when called:    4
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text2
   660  000DDA                     __ptext2:
   661                           	opt stack 0
   662  000DDA                     _configura_pic:
   663                           	opt stack 26
   664                           
   665                           ;funcs.c: 156: TRISAbits.RA0 = 1;
   666                           
   667                           ;incstack = 0
   668  000DDA  8092               	bsf	3986,0,c	;volatile
   669                           
   670                           ;funcs.c: 157: TRISAbits.RA1 = 0;
   671  000DDC  9292               	bcf	3986,1,c	;volatile
   672                           
   673                           ;funcs.c: 158: TRISAbits.RA2 = 0;
   674  000DDE  9492               	bcf	3986,2,c	;volatile
   675                           
   676                           ;funcs.c: 159: TRISDbits.RD7 = 0;
   677  000DE0  9E95               	bcf	3989,7,c	;volatile
   678                           
   679                           ;funcs.c: 161: T0CON = 0x17;
   680  000DE2  0E17               	movlw	23
   681  000DE4  6ED5               	movwf	4053,c	;volatile
   682                           
   683                           ;funcs.c: 162: TMR0 = 0x48E4;
   684  000DE6  0E48               	movlw	72
   685  000DE8  6ED7               	movwf	4055,c	;volatile
   686  000DEA  0EE4               	movlw	228
   687  000DEC  6ED6               	movwf	4054,c	;volatile
   688                           
   689                           ;funcs.c: 163: TMR0ON = 1;
   690  000DEE  8ED5               	bsf	4053,7,c	;volatile
   691                           
   692                           ;funcs.c: 164: INTCON = 0x20;
   693  000DF0  0E20               	movlw	32
   694  000DF2  6EF2               	movwf	intcon,c	;volatile
   695                           
   696                           ;funcs.c: 165: TMR0IF = 0;
   697  000DF4  94F2               	bcf	intcon,2,c	;volatile
   698                           
   699                           ;funcs.c: 167: TRISB=0b00000001;
   700  000DF6  0E01               	movlw	1
   701  000DF8  6E93               	movwf	3987,c	;volatile
   702                           
   703                           ;funcs.c: 168: RBPU=0;
   704  000DFA  9EF1               	bcf	intcon2,7,c	;volatile
   705                           
   706                           ;funcs.c: 169: LATBbits.LATB0 = 1;
   707  000DFC  808A               	bsf	3978,0,c	;volatile
   708                           
   709                           ;funcs.c: 170: INT0IE=1;
   710  000DFE  88F2               	bsf	intcon,4,c	;volatile
   711                           
   712                           ;funcs.c: 171: INTEDG0=0;
   713  000E00  9CF1               	bcf	intcon2,6,c	;volatile
   714                           
   715                           ;funcs.c: 173: PORTA = 0x00;
   716  000E02  0E00               	movlw	0
   717  000E04  6E80               	movwf	3968,c	;volatile
   718                           
   719                           ;funcs.c: 174: ADCON1 = 0X0F;
   720  000E06  0E0F               	movlw	15
   721  000E08  6EC1               	movwf	4033,c	;volatile
   722  000E0A  0012               	return		;funcret
   723  000E0C                     __end_of_configura_pic:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           intcon	equ	0xFF2
   730                           intcon2	equ	0xFF1
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           postdec1	equ	0xFE5
   734                           fsr1l	equ	0xFE1
   735                           status	equ	0xFD8
   736                           
   737 ;; *************** function _atualiza_variaveis *****************
   738 ;; Defined at:
   739 ;;		line 39 in file "funcs.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  count           1    2[BANK0 ] unsigned char 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   753 ;;      Params:         0       0       0       0       0       0       0       0       0
   754 ;;      Locals:         0       1       0       0       0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0       0       0       0       0
   756 ;;      Totals:         0       1       0       0       0       0       0       0       0
   757 ;;Total ram usage:        1 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    5
   760 ;; This function calls:
   761 ;;		_le_eeprom
   762 ;; This function is called by:
   763 ;;		_main
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text3
   768  00079C                     __ptext3:
   769                           	opt stack 0
   770  00079C                     _atualiza_variaveis:
   771                           	opt stack 25
   772                           
   773                           ;funcs.c: 41: char count;
   774                           ;funcs.c: 42: for(count = 0; count < 4; count++)
   775                           
   776                           ;incstack = 0
   777  00079C  0E00               	movlw	0
   778  00079E  0100               	movlb	0	; () banked
   779  0007A0  6F76               	movwf	atualiza_variaveis@count& (0+255),b
   780  0007A2                     l2096:
   781                           
   782                           ; BSR set to: 0
   783  0007A2  0E03               	movlw	3
   784  0007A4  6576               	cpfsgt	atualiza_variaveis@count& (0+255),b
   785  0007A6  D001               	goto	l230
   786  0007A8  0012               	return	
   787  0007AA                     l230:
   788                           
   789                           ; BSR set to: 0
   790                           ;funcs.c: 43: {
   791                           ;funcs.c: 44: remedio[count].d_hora = le_eeprom(add_d_hora + count);
   792                           
   793                           ; BSR set to: 0
   794  0007AA  5176               	movf	atualiza_variaveis@count& (0+255),w,b
   795  0007AC  0D05               	mullw	5
   796  0007AE  0E60               	movlw	low _remedio
   797  0007B0  24F3               	addwf	prodl,w,c
   798  0007B2  6ED9               	movwf	fsr2l,c
   799  0007B4  0E00               	movlw	high _remedio
   800  0007B6  20F4               	addwfc	prodh,w,c
   801  0007B8  6EDA               	movwf	fsr2h,c
   802  0007BA  502D               	movf	_add_d_hora,w,c
   803  0007BC  2576               	addwf	atualiza_variaveis@count& (0+255),w,b
   804  0007BE  6F74               	movwf	le_eeprom@address& (0+255),b
   805  0007C0  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   806  0007C2  3775               	rlcf	(le_eeprom@address+1)& (0+255),f,b
   807  0007C4  EC66  F007         	call	_le_eeprom	;wreg free
   808  0007C8  6EDF               	movwf	indf2,c
   809                           
   810                           ;funcs.c: 45: remedio[count].u_hora = le_eeprom(add_u_hora + count);
   811  0007CA  0100               	movlb	0	; () banked
   812  0007CC  5176               	movf	atualiza_variaveis@count& (0+255),w,b
   813  0007CE  0D05               	mullw	5
   814  0007D0  0E01               	movlw	1
   815  0007D2  26F3               	addwf	prodl,f,c
   816  0007D4  0E00               	movlw	0
   817  0007D6  22F4               	addwfc	prodh,f,c
   818  0007D8  0E60               	movlw	low _remedio
   819  0007DA  24F3               	addwf	prodl,w,c
   820  0007DC  6ED9               	movwf	fsr2l,c
   821  0007DE  0E00               	movlw	high _remedio
   822  0007E0  20F4               	addwfc	prodh,w,c
   823  0007E2  6EDA               	movwf	fsr2h,c
   824  0007E4  5039               	movf	_add_u_hora,w,c
   825  0007E6  2576               	addwf	atualiza_variaveis@count& (0+255),w,b
   826  0007E8  6F74               	movwf	le_eeprom@address& (0+255),b
   827  0007EA  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   828  0007EC  3775               	rlcf	(le_eeprom@address+1)& (0+255),f,b
   829  0007EE  EC66  F007         	call	_le_eeprom	;wreg free
   830  0007F2  6EDF               	movwf	indf2,c
   831                           
   832                           ;funcs.c: 46: remedio[count].d_minuto = le_eeprom(add_d_minuto + count);
   833  0007F4  0100               	movlb	0	; () banked
   834  0007F6  5176               	movf	atualiza_variaveis@count& (0+255),w,b
   835  0007F8  0D05               	mullw	5
   836  0007FA  0E02               	movlw	2
   837  0007FC  26F3               	addwf	prodl,f,c
   838  0007FE  0E00               	movlw	0
   839  000800  22F4               	addwfc	prodh,f,c
   840  000802  0E60               	movlw	low _remedio
   841  000804  24F3               	addwf	prodl,w,c
   842  000806  6ED9               	movwf	fsr2l,c
   843  000808  0E00               	movlw	high _remedio
   844  00080A  20F4               	addwfc	prodh,w,c
   845  00080C  6EDA               	movwf	fsr2h,c
   846  00080E  5038               	movf	_add_d_minuto,w,c
   847  000810  2576               	addwf	atualiza_variaveis@count& (0+255),w,b
   848  000812  6F74               	movwf	le_eeprom@address& (0+255),b
   849  000814  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   850  000816  3775               	rlcf	(le_eeprom@address+1)& (0+255),f,b
   851  000818  EC66  F007         	call	_le_eeprom	;wreg free
   852  00081C  6EDF               	movwf	indf2,c
   853                           
   854                           ;funcs.c: 47: remedio[count].u_minuto = le_eeprom(add_u_minuto + count);
   855  00081E  0100               	movlb	0	; () banked
   856  000820  5176               	movf	atualiza_variaveis@count& (0+255),w,b
   857  000822  0D05               	mullw	5
   858  000824  0E03               	movlw	3
   859  000826  26F3               	addwf	prodl,f,c
   860  000828  0E00               	movlw	0
   861  00082A  22F4               	addwfc	prodh,f,c
   862  00082C  0E60               	movlw	low _remedio
   863  00082E  24F3               	addwf	prodl,w,c
   864  000830  6ED9               	movwf	fsr2l,c
   865  000832  0E00               	movlw	high _remedio
   866  000834  20F4               	addwfc	prodh,w,c
   867  000836  6EDA               	movwf	fsr2h,c
   868  000838  5037               	movf	_add_u_minuto,w,c
   869  00083A  2576               	addwf	atualiza_variaveis@count& (0+255),w,b
   870  00083C  6F74               	movwf	le_eeprom@address& (0+255),b
   871  00083E  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   872  000840  3775               	rlcf	(le_eeprom@address+1)& (0+255),f,b
   873  000842  EC66  F007         	call	_le_eeprom	;wreg free
   874  000846  6EDF               	movwf	indf2,c
   875                           
   876                           ;funcs.c: 48: remedio[count].passo = le_eeprom(add_passo + count);
   877  000848  0100               	movlb	0	; () banked
   878  00084A  5176               	movf	atualiza_variaveis@count& (0+255),w,b
   879  00084C  0D05               	mullw	5
   880  00084E  0E04               	movlw	4
   881  000850  26F3               	addwf	prodl,f,c
   882  000852  0E00               	movlw	0
   883  000854  22F4               	addwfc	prodh,f,c
   884  000856  0E60               	movlw	low _remedio
   885  000858  24F3               	addwf	prodl,w,c
   886  00085A  6ED9               	movwf	fsr2l,c
   887  00085C  0E00               	movlw	high _remedio
   888  00085E  20F4               	addwfc	prodh,w,c
   889  000860  6EDA               	movwf	fsr2h,c
   890  000862  5036               	movf	_add_passo,w,c
   891  000864  2576               	addwf	atualiza_variaveis@count& (0+255),w,b
   892  000866  6F74               	movwf	le_eeprom@address& (0+255),b
   893  000868  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   894  00086A  3775               	rlcf	(le_eeprom@address+1)& (0+255),f,b
   895  00086C  EC66  F007         	call	_le_eeprom	;wreg free
   896  000870  6EDF               	movwf	indf2,c
   897  000872  0100               	movlb	0	; () banked
   898  000874  2B76               	incf	atualiza_variaveis@count& (0+255),f,b
   899  000876  D795               	goto	l2096
   900  000878                     __end_of_atualiza_variaveis:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           prodh	equ	0xFF4
   907                           prodl	equ	0xFF3
   908                           intcon	equ	0xFF2
   909                           intcon2	equ	0xFF1
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           indf2	equ	0xFDF
   915                           fsr2h	equ	0xFDA
   916                           fsr2l	equ	0xFD9
   917                           status	equ	0xFD8
   918                           
   919 ;; *************** function _atualiza_relogio *****************
   920 ;; Defined at:
   921 ;;		line 204 in file "funcs.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   935 ;;      Params:         0       0       0       0       0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0       0       0
   938 ;;      Totals:         0       0       0       0       0       0       0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    5
   942 ;; This function calls:
   943 ;;		_le_eeprom
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text4
   950  000CE8                     __ptext4:
   951                           	opt stack 0
   952  000CE8                     _atualiza_relogio:
   953                           	opt stack 25
   954                           
   955                           ;funcs.c: 206: Hora = le_eeprom(add_d_hora + 20) * 10;
   956                           
   957                           ; BSR set to: 0
   958                           ;incstack = 0
   959  000CE8  0E14               	movlw	20
   960  000CEA  242D               	addwf	_add_d_hora,w,c
   961  000CEC  0100               	movlb	0	; () banked
   962  000CEE  6F74               	movwf	le_eeprom@address& (0+255),b
   963  000CF0  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   964  000CF2  0E00               	movlw	0
   965  000CF4  2375               	addwfc	(le_eeprom@address+1)& (0+255),f,b
   966  000CF6  EC66  F007         	call	_le_eeprom	;wreg free
   967  000CFA  0D0A               	mullw	10
   968  000CFC  CFF3 F03A          	movff	prodl,_Hora
   969                           
   970                           ;funcs.c: 207: Hora += le_eeprom(add_d_hora + 21);
   971  000D00  0E15               	movlw	21
   972  000D02  242D               	addwf	_add_d_hora,w,c
   973  000D04  0100               	movlb	0	; () banked
   974  000D06  6F74               	movwf	le_eeprom@address& (0+255),b
   975  000D08  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   976  000D0A  0E00               	movlw	0
   977  000D0C  2375               	addwfc	(le_eeprom@address+1)& (0+255),f,b
   978  000D0E  EC66  F007         	call	_le_eeprom	;wreg free
   979  000D12  263A               	addwf	_Hora,f,c
   980                           
   981                           ;funcs.c: 208: Min = le_eeprom(add_d_hora + 22) * 10;
   982  000D14  0E16               	movlw	22
   983  000D16  242D               	addwf	_add_d_hora,w,c
   984  000D18  0100               	movlb	0	; () banked
   985  000D1A  6F74               	movwf	le_eeprom@address& (0+255),b
   986  000D1C  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   987  000D1E  0E00               	movlw	0
   988  000D20  2375               	addwfc	(le_eeprom@address+1)& (0+255),f,b
   989  000D22  EC66  F007         	call	_le_eeprom	;wreg free
   990  000D26  0D0A               	mullw	10
   991  000D28  CFF3 F03B          	movff	prodl,_Min
   992                           
   993                           ;funcs.c: 209: Min += le_eeprom(add_d_hora + 23);
   994  000D2C  0E17               	movlw	23
   995  000D2E  242D               	addwf	_add_d_hora,w,c
   996  000D30  0100               	movlb	0	; () banked
   997  000D32  6F74               	movwf	le_eeprom@address& (0+255),b
   998  000D34  6B75               	clrf	(le_eeprom@address+1)& (0+255),b
   999  000D36  0E00               	movlw	0
  1000  000D38  2375               	addwfc	(le_eeprom@address+1)& (0+255),f,b
  1001  000D3A  EC66  F007         	call	_le_eeprom	;wreg free
  1002  000D3E  263B               	addwf	_Min,f,c
  1003  000D40  0012               	return		;funcret
  1004  000D42                     __end_of_atualiza_relogio:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           prodh	equ	0xFF4
  1011                           prodl	equ	0xFF3
  1012                           intcon	equ	0xFF2
  1013                           intcon2	equ	0xFF1
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1l	equ	0xFE1
  1018                           indf2	equ	0xFDF
  1019                           fsr2h	equ	0xFDA
  1020                           fsr2l	equ	0xFD9
  1021                           status	equ	0xFD8
  1022                           
  1023 ;; *************** function _le_eeprom *****************
  1024 ;; Defined at:
  1025 ;;		line 130 in file "funcs.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  address         2    0[BANK0 ] int 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;		None
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      unsigned char 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1039 ;;      Params:         0       2       0       0       0       0       0       0       0
  1040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1042 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1043 ;;Total ram usage:        2 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    4
  1046 ;; This function calls:
  1047 ;;		Nothing
  1048 ;; This function is called by:
  1049 ;;		_atualiza_variaveis
  1050 ;;		_atualiza_relogio
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           	psect	text5
  1055  000ECC                     __ptext5:
  1056                           	opt stack 0
  1057  000ECC                     _le_eeprom:
  1058                           	opt stack 25
  1059                           
  1060                           ;funcs.c: 132: EEADR = address;
  1061                           
  1062                           ;incstack = 0
  1063  000ECC  C074  FFA9         	movff	le_eeprom@address,4009	;volatile
  1064                           
  1065                           ;funcs.c: 133: EECON1bits.WREN = 0;
  1066  000ED0  94A6               	bcf	4006,2,c	;volsfr
  1067                           
  1068                           ;funcs.c: 134: EECON1bits.EEPGD = 0;
  1069  000ED2  9EA6               	bcf	4006,7,c	;volsfr
  1070                           
  1071                           ;funcs.c: 135: EECON1bits.RD = 1;
  1072  000ED4  80A6               	bsf	4006,0,c	;volsfr
  1073                           
  1074                           ;funcs.c: 136: return(EEDATA);
  1075  000ED6  50A8               	movf	4008,w,c	;volatile
  1076  000ED8  0012               	return	
  1077  000EDA                     __end_of_le_eeprom:
  1078                           	opt stack 0
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           prodh	equ	0xFF4
  1084                           prodl	equ	0xFF3
  1085                           intcon	equ	0xFF2
  1086                           intcon2	equ	0xFF1
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           indf2	equ	0xFDF
  1092                           fsr2h	equ	0xFDA
  1093                           fsr2l	equ	0xFD9
  1094                           status	equ	0xFD8
  1095                           
  1096 ;; *************** function _aciona *****************
  1097 ;; Defined at:
  1098 ;;		line 5 in file "funcs.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1112 ;;      Params:         0       0       0       0       0       0       0       0       0
  1113 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1114 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1115 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1116 ;;Total ram usage:        1 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    6
  1119 ;; This function calls:
  1120 ;;		_atualiza_remedio
  1121 ;;		_controle_servo
  1122 ;; This function is called by:
  1123 ;;		_main
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text6
  1128  000D42                     __ptext6:
  1129                           	opt stack 0
  1130  000D42                     _aciona:
  1131                           	opt stack 24
  1132                           
  1133                           ;funcs.c: 7: for(in = 0; in < 4; in++)
  1134                           
  1135                           ;incstack = 0
  1136  000D42  0E00               	movlw	0
  1137  000D44  6E34               	movwf	_in,c
  1138  000D46                     l2108:
  1139  000D46  0E03               	movlw	3
  1140  000D48  6434               	cpfsgt	_in,c
  1141  000D4A  D001               	goto	l214
  1142  000D4C  D01F               	goto	u1440
  1143  000D4E                     l214:
  1144                           
  1145                           ;funcs.c: 8: {
  1146                           ;funcs.c: 9: if(pendencia_remedio[in] == 1)
  1147  000D4E  5034               	movf	_in,w,c
  1148  000D50  0D01               	mullw	1
  1149  000D52  0E29               	movlw	low _pendencia_remedio
  1150  000D54  24F3               	addwf	prodl,w,c
  1151  000D56  6ED9               	movwf	fsr2l,c
  1152  000D58  0E00               	movlw	high _pendencia_remedio
  1153  000D5A  20F4               	addwfc	prodh,w,c
  1154  000D5C  6EDA               	movwf	fsr2h,c
  1155  000D5E  04DE               	decf	postinc2,w,c
  1156  000D60  A4D8               	btfss	status,2,c
  1157  000D62  D012               	goto	u1430
  1158                           
  1159                           ;funcs.c: 10: {
  1160                           ;funcs.c: 11: atualiza_remedio(in);
  1161  000D64  5034               	movf	_in,w,c
  1162  000D66  EC2B  F001         	call	_atualiza_remedio
  1163                           
  1164                           ;funcs.c: 12: while(pendencia_remedio[in] == 1)
  1165  000D6A  D003               	goto	l217
  1166  000D6C                     
  1167                           ;funcs.c: 13: {
  1168                           ;funcs.c: 14: controle_servo(in+1);
  1169  000D6C  2834               	incf	_in,w,c
  1170  000D6E  ECAD  F002         	call	_controle_servo
  1171  000D72                     l217:
  1172  000D72  5034               	movf	_in,w,c
  1173  000D74  0D01               	mullw	1
  1174  000D76  0E29               	movlw	low _pendencia_remedio
  1175  000D78  24F3               	addwf	prodl,w,c
  1176  000D7A  6ED9               	movwf	fsr2l,c
  1177  000D7C  0E00               	movlw	high _pendencia_remedio
  1178  000D7E  20F4               	addwfc	prodh,w,c
  1179  000D80  6EDA               	movwf	fsr2h,c
  1180  000D82  04DE               	decf	postinc2,w,c
  1181  000D84  B4D8               	btfsc	status,2,c
  1182  000D86  D7F2               	goto	l218
  1183  000D88                     u1430:
  1184  000D88  2A34               	incf	_in,f,c
  1185  000D8A  D7DD               	goto	l2108
  1186  000D8C                     u1440:
  1187                           
  1188                           ;funcs.c: 15: }
  1189                           ;funcs.c: 16: }
  1190                           ;funcs.c: 17: }
  1191                           ;funcs.c: 18: libera = 0;
  1192  000D8C  0E00               	movlw	0
  1193  000D8E  6E33               	movwf	_libera,c
  1194                           
  1195                           ;funcs.c: 19: led = 0;
  1196  000D90  0E00               	movlw	0
  1197  000D92  6E30               	movwf	_led,c
  1198                           
  1199                           ;funcs.c: 20: PORTAbits.RA1 = 0;
  1200  000D94  9280               	bcf	3968,1,c	;volatile
  1201  000D96  0012               	return		;funcret
  1202  000D98                     __end_of_aciona:
  1203                           	opt stack 0
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           prodh	equ	0xFF4
  1209                           prodl	equ	0xFF3
  1210                           intcon	equ	0xFF2
  1211                           intcon2	equ	0xFF1
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           postdec1	equ	0xFE5
  1215                           fsr1l	equ	0xFE1
  1216                           indf2	equ	0xFDF
  1217                           postinc2	equ	0xFDE
  1218                           fsr2h	equ	0xFDA
  1219                           fsr2l	equ	0xFD9
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _controle_servo *****************
  1223 ;; Defined at:
  1224 ;;		line 69 in file "funcs.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  numero_do_re    1    wreg     unsigned char 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  numero_do_re    1    2[BANK0 ] unsigned char 
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1238 ;;      Params:         0       0       0       0       0       0       0       0       0
  1239 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1240 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1241 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1242 ;;Total ram usage:        3 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    4
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_main
  1249 ;;		_aciona
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text7
  1254  00055A                     __ptext7:
  1255                           	opt stack 0
  1256  00055A                     _controle_servo:
  1257                           	opt stack 26
  1258                           
  1259                           ;incstack = 0
  1260                           ;controle_servo@numero_do_remedio stored from wreg
  1261  00055A  0100               	movlb	0	; () banked
  1262  00055C  6F76               	movwf	controle_servo@numero_do_remedio& (0+255),b
  1263                           
  1264                           ;funcs.c: 71: if(numero_do_remedio == 0)
  1265  00055E  0100               	movlb	0	; () banked
  1266  000560  5176               	movf	controle_servo@numero_do_remedio& (0+255),w,b
  1267  000562  A4D8               	btfss	status,2,c
  1268  000564  D019               	goto	l239
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;funcs.c: 72: {
  1272                           ;funcs.c: 73: PORTDbits.RD7 = 1;
  1273  000566  8E83               	bsf	3971,7,c	;volatile
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;funcs.c: 74: _delay((unsigned long)((0.5)*(48000000/4000.0)));
  1277  000568  0E08               	movlw	8
  1278  00056A  0100               	movlb	0	; () banked
  1279  00056C  6F74               	movwf	??_controle_servo& (0+255),b
  1280  00056E  0EC9               	movlw	201
  1281  000570                     u1467:
  1282  000570  2EE8               	decfsz	wreg,f,c
  1283  000572  D7FE               	bra	u1467
  1284  000574  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1285  000576  D7FC               	bra	u1467
  1286  000578  D000               	nop2	
  1287                           
  1288                           ;funcs.c: 75: PORTDbits.RD7 = 0;
  1289  00057A  9E83               	bcf	3971,7,c	;volatile
  1290                           
  1291                           ;funcs.c: 76: _delay((unsigned long)((19.5)*(48000000/4000.0)));
  1292  00057C  0E02               	movlw	2
  1293  00057E  0100               	movlb	0	; () banked
  1294  000580  6F75               	movwf	(??_controle_servo+1)& (0+255),b
  1295  000582  0E30               	movlw	48
  1296  000584  6F74               	movwf	??_controle_servo& (0+255),b
  1297  000586  0EE2               	movlw	226
  1298  000588                     u1477:
  1299  000588  2EE8               	decfsz	wreg,f,c
  1300  00058A  D7FE               	bra	u1477
  1301  00058C  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1302  00058E  D7FC               	bra	u1477
  1303  000590  2F75               	decfsz	(??_controle_servo+1)& (0+255),f,b
  1304  000592  D7FA               	bra	u1477
  1305  000594  F000               	nop	
  1306                           
  1307                           ;funcs.c: 77: }
  1308  000596  0012               	return	
  1309  000598                     l239:
  1310                           
  1311                           ;funcs.c: 78: else if(numero_do_remedio == 1)
  1312  000598  0100               	movlb	0	; () banked
  1313  00059A  0576               	decf	controle_servo@numero_do_remedio& (0+255),w,b
  1314  00059C  A4D8               	btfss	status,2,c
  1315  00059E  D018               	goto	l241
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;funcs.c: 79: {
  1319                           ;funcs.c: 80: PORTDbits.RD7 = 1;
  1320  0005A0  8E83               	bsf	3971,7,c	;volatile
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;funcs.c: 81: _delay((unsigned long)((0.9)*(48000000/4000.0)));
  1324  0005A2  0E0F               	movlw	15
  1325  0005A4  0100               	movlb	0	; () banked
  1326  0005A6  6F74               	movwf	??_controle_servo& (0+255),b
  1327  0005A8  0E05               	movlw	5
  1328  0005AA                     u1487:
  1329  0005AA  2EE8               	decfsz	wreg,f,c
  1330  0005AC  D7FE               	bra	u1487
  1331  0005AE  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1332  0005B0  D7FC               	bra	u1487
  1333                           
  1334                           ;funcs.c: 82: PORTDbits.RD7 = 0;
  1335  0005B2  9E83               	bcf	3971,7,c	;volatile
  1336                           
  1337                           ;funcs.c: 83: _delay((unsigned long)((19.1)*(48000000/4000.0)));
  1338  0005B4  0E02               	movlw	2
  1339  0005B6  0100               	movlb	0	; () banked
  1340  0005B8  6F75               	movwf	(??_controle_servo+1)& (0+255),b
  1341  0005BA  0E2A               	movlw	42
  1342  0005BC  6F74               	movwf	??_controle_servo& (0+255),b
  1343  0005BE  0EA6               	movlw	166
  1344  0005C0                     u1497:
  1345  0005C0  2EE8               	decfsz	wreg,f,c
  1346  0005C2  D7FE               	bra	u1497
  1347  0005C4  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1348  0005C6  D7FC               	bra	u1497
  1349  0005C8  2F75               	decfsz	(??_controle_servo+1)& (0+255),f,b
  1350  0005CA  D7FA               	bra	u1497
  1351  0005CC  F000               	nop	
  1352                           
  1353                           ;funcs.c: 84: }
  1354  0005CE  0012               	return	
  1355  0005D0                     l241:
  1356                           
  1357                           ;funcs.c: 85: else if(numero_do_remedio == 2)
  1358  0005D0  0E02               	movlw	2
  1359  0005D2  0100               	movlb	0	; () banked
  1360  0005D4  1976               	xorwf	controle_servo@numero_do_remedio& (0+255),w,b
  1361  0005D6  A4D8               	btfss	status,2,c
  1362  0005D8  D019               	goto	l243
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;funcs.c: 86: {
  1366                           ;funcs.c: 87: PORTDbits.RD7 = 1;
  1367  0005DA  8E83               	bsf	3971,7,c	;volatile
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;funcs.c: 88: _delay((unsigned long)((1.4)*(48000000/4000.0)));
  1371  0005DC  0E16               	movlw	22
  1372  0005DE  0100               	movlb	0	; () banked
  1373  0005E0  6F74               	movwf	??_controle_servo& (0+255),b
  1374  0005E2  0ED0               	movlw	208
  1375  0005E4                     u1507:
  1376  0005E4  2EE8               	decfsz	wreg,f,c
  1377  0005E6  D7FE               	bra	u1507
  1378  0005E8  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1379  0005EA  D7FC               	bra	u1507
  1380  0005EC  F000               	nop	
  1381                           
  1382                           ;funcs.c: 89: PORTDbits.RD7 = 0;
  1383  0005EE  9E83               	bcf	3971,7,c	;volatile
  1384                           
  1385                           ;funcs.c: 90: _delay((unsigned long)((18.6)*(48000000/4000.0)));
  1386  0005F0  0E02               	movlw	2
  1387  0005F2  0100               	movlb	0	; () banked
  1388  0005F4  6F75               	movwf	(??_controle_servo+1)& (0+255),b
  1389  0005F6  0E22               	movlw	34
  1390  0005F8  6F74               	movwf	??_controle_servo& (0+255),b
  1391  0005FA  0EDB               	movlw	219
  1392  0005FC                     u1517:
  1393  0005FC  2EE8               	decfsz	wreg,f,c
  1394  0005FE  D7FE               	bra	u1517
  1395  000600  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1396  000602  D7FC               	bra	u1517
  1397  000604  2F75               	decfsz	(??_controle_servo+1)& (0+255),f,b
  1398  000606  D7FA               	bra	u1517
  1399  000608  D000               	nop2	
  1400                           
  1401                           ;funcs.c: 91: }
  1402  00060A  0012               	return	
  1403  00060C                     l243:
  1404                           
  1405                           ;funcs.c: 92: else if(numero_do_remedio == 3)
  1406  00060C  0E03               	movlw	3
  1407  00060E  0100               	movlb	0	; () banked
  1408  000610  1976               	xorwf	controle_servo@numero_do_remedio& (0+255),w,b
  1409  000612  A4D8               	btfss	status,2,c
  1410  000614  D019               	goto	l245
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;funcs.c: 93: {
  1414                           ;funcs.c: 94: PORTDbits.RD7 = 1;
  1415  000616  8E83               	bsf	3971,7,c	;volatile
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;funcs.c: 95: _delay((unsigned long)((2)*(48000000/4000.0)));
  1419  000618  0E20               	movlw	32
  1420  00061A  0100               	movlb	0	; () banked
  1421  00061C  6F74               	movwf	??_controle_servo& (0+255),b
  1422  00061E  0E29               	movlw	41
  1423  000620                     u1527:
  1424  000620  2EE8               	decfsz	wreg,f,c
  1425  000622  D7FE               	bra	u1527
  1426  000624  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1427  000626  D7FC               	bra	u1527
  1428  000628  D000               	nop2	
  1429                           
  1430                           ;funcs.c: 96: PORTDbits.RD7 = 0;
  1431  00062A  9E83               	bcf	3971,7,c	;volatile
  1432                           
  1433                           ;funcs.c: 97: _delay((unsigned long)((18)*(48000000/4000.0)));
  1434  00062C  0E02               	movlw	2
  1435  00062E  0100               	movlb	0	; () banked
  1436  000630  6F75               	movwf	(??_controle_servo+1)& (0+255),b
  1437  000632  0E19               	movlw	25
  1438  000634  6F74               	movwf	??_controle_servo& (0+255),b
  1439  000636  0E81               	movlw	129
  1440  000638                     u1537:
  1441  000638  2EE8               	decfsz	wreg,f,c
  1442  00063A  D7FE               	bra	u1537
  1443  00063C  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1444  00063E  D7FC               	bra	u1537
  1445  000640  2F75               	decfsz	(??_controle_servo+1)& (0+255),f,b
  1446  000642  D7FA               	bra	u1537
  1447  000644  D000               	nop2	
  1448                           
  1449                           ;funcs.c: 98: }
  1450  000646  0012               	return	
  1451  000648                     l245:
  1452                           
  1453                           ;funcs.c: 99: else if(numero_do_remedio == 4)
  1454  000648  0E04               	movlw	4
  1455  00064A  0100               	movlb	0	; () banked
  1456  00064C  1976               	xorwf	controle_servo@numero_do_remedio& (0+255),w,b
  1457  00064E  A4D8               	btfss	status,2,c
  1458  000650  0012               	return	
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;funcs.c: 100: {
  1462                           ;funcs.c: 101: PORTDbits.RD7 = 1;
  1463  000652  8E83               	bsf	3971,7,c	;volatile
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;funcs.c: 102: _delay((unsigned long)((2.4)*(48000000/4000.0)));
  1467  000654  0E26               	movlw	38
  1468  000656  0100               	movlb	0	; () banked
  1469  000658  6F74               	movwf	??_controle_servo& (0+255),b
  1470  00065A  0E65               	movlw	101
  1471  00065C                     u1547:
  1472  00065C  2EE8               	decfsz	wreg,f,c
  1473  00065E  D7FE               	bra	u1547
  1474  000660  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1475  000662  D7FC               	bra	u1547
  1476  000664  D000               	nop2	
  1477                           
  1478                           ;funcs.c: 103: PORTDbits.RD7 = 0;
  1479  000666  9E83               	bcf	3971,7,c	;volatile
  1480                           
  1481                           ;funcs.c: 104: _delay((unsigned long)((17.6)*(48000000/4000.0)));
  1482  000668  0E02               	movlw	2
  1483  00066A  0100               	movlb	0	; () banked
  1484  00066C  6F75               	movwf	(??_controle_servo+1)& (0+255),b
  1485  00066E  0E13               	movlw	19
  1486  000670  6F74               	movwf	??_controle_servo& (0+255),b
  1487  000672  0E45               	movlw	69
  1488  000674                     u1557:
  1489  000674  2EE8               	decfsz	wreg,f,c
  1490  000676  D7FE               	bra	u1557
  1491  000678  2F74               	decfsz	??_controle_servo& (0+255),f,b
  1492  00067A  D7FC               	bra	u1557
  1493  00067C  2F75               	decfsz	(??_controle_servo+1)& (0+255),f,b
  1494  00067E  D7FA               	bra	u1557
  1495  000680  D000               	nop2	
  1496  000682  0012               	return	
  1497  000684                     __end_of_controle_servo:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           intcon	equ	0xFF2
  1506                           intcon2	equ	0xFF1
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postdec1	equ	0xFE5
  1510                           fsr1l	equ	0xFE1
  1511                           indf2	equ	0xFDF
  1512                           postinc2	equ	0xFDE
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _atualiza_remedio *****************
  1518 ;; Defined at:
  1519 ;;		line 51 in file "funcs.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  count           1    wreg     unsigned char 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  count           1   16[BANK0 ] unsigned char 
  1524 ;;  dados           1   15[BANK0 ] unsigned char 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1534 ;;      Params:         0       0       0       0       0       0       0       0       0
  1535 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1536 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1537 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1538 ;;Total ram usage:        5 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    5
  1541 ;; This function calls:
  1542 ;;		___awdiv
  1543 ;;		___awmod
  1544 ;;		_grava_eeprom
  1545 ;; This function is called by:
  1546 ;;		_aciona
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text8
  1551  000256                     __ptext8:
  1552                           	opt stack 0
  1553  000256                     _atualiza_remedio:
  1554                           	opt stack 24
  1555                           
  1556                           ;incstack = 0
  1557                           ;atualiza_remedio@count stored from wreg
  1558  000256  0100               	movlb	0	; () banked
  1559  000258  6F84               	movwf	atualiza_remedio@count& (0+255),b
  1560                           
  1561                           ;funcs.c: 53: char dados;
  1562                           ;funcs.c: 54: remedio[count].d_hora = (Hora/10 + (remedio[count].passo)/10);
  1563  00025A  0100               	movlb	0	; () banked
  1564  00025C  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1565  00025E  0D05               	mullw	5
  1566  000260  0E60               	movlw	low _remedio
  1567  000262  24F3               	addwf	prodl,w,c
  1568  000264  6ED9               	movwf	fsr2l,c
  1569  000266  0E00               	movlw	high _remedio
  1570  000268  20F4               	addwfc	prodh,w,c
  1571  00026A  6EDA               	movwf	fsr2h,c
  1572  00026C  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1573  00026E  0D05               	mullw	5
  1574  000270  0E04               	movlw	4
  1575  000272  26F3               	addwf	prodl,f,c
  1576  000274  0E00               	movlw	0
  1577  000276  22F4               	addwfc	prodh,f,c
  1578  000278  0E60               	movlw	low _remedio
  1579  00027A  24F3               	addwf	prodl,w,c
  1580  00027C  6EE1               	movwf	fsr1l,c
  1581  00027E  0E00               	movlw	high _remedio
  1582  000280  20F4               	addwfc	prodh,w,c
  1583  000282  6EE2               	movwf	fsr1h,c
  1584  000284  50E7               	movf	indf1,w,c
  1585  000286  6F80               	movwf	??_atualiza_remedio& (0+255),b
  1586  000288  5180               	movf	??_atualiza_remedio& (0+255),w,b
  1587  00028A  6F74               	movwf	___awdiv@dividend& (0+255),b
  1588  00028C  6B75               	clrf	(___awdiv@dividend+1)& (0+255),b
  1589  00028E  0E00               	movlw	0
  1590  000290  6F77               	movwf	(___awdiv@divisor+1)& (0+255),b
  1591  000292  0E0A               	movlw	10
  1592  000294  6F76               	movwf	___awdiv@divisor& (0+255),b
  1593  000296  EC7E  F005         	call	___awdiv	;wreg free
  1594  00029A  C074  F081         	movff	?___awdiv,??_atualiza_remedio+1
  1595  00029E  C075  F082         	movff	?___awdiv+1,??_atualiza_remedio+2
  1596  0002A2  C03A  F074         	movff	_Hora,___awdiv@dividend
  1597  0002A6  0100               	movlb	0	; () banked
  1598  0002A8  6B75               	clrf	(___awdiv@dividend+1)& (0+255),b
  1599  0002AA  0E00               	movlw	0
  1600  0002AC  6F77               	movwf	(___awdiv@divisor+1)& (0+255),b
  1601  0002AE  0E0A               	movlw	10
  1602  0002B0  6F76               	movwf	___awdiv@divisor& (0+255),b
  1603  0002B2  EC7E  F005         	call	___awdiv	;wreg free
  1604  0002B6  0100               	movlb	0	; () banked
  1605  0002B8  5174               	movf	?___awdiv& (0+255),w,b
  1606  0002BA  2581               	addwf	(??_atualiza_remedio+1)& (0+255),w,b
  1607  0002BC  6EDF               	movwf	indf2,c
  1608                           
  1609                           ;funcs.c: 55: remedio[count].u_hora = (Hora%10 + (remedio[count].passo)%10);
  1610  0002BE  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1611  0002C0  0D05               	mullw	5
  1612  0002C2  0E01               	movlw	1
  1613  0002C4  26F3               	addwf	prodl,f,c
  1614  0002C6  0E00               	movlw	0
  1615  0002C8  22F4               	addwfc	prodh,f,c
  1616  0002CA  0E60               	movlw	low _remedio
  1617  0002CC  24F3               	addwf	prodl,w,c
  1618  0002CE  6ED9               	movwf	fsr2l,c
  1619  0002D0  0E00               	movlw	high _remedio
  1620  0002D2  20F4               	addwfc	prodh,w,c
  1621  0002D4  6EDA               	movwf	fsr2h,c
  1622  0002D6  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1623  0002D8  0D05               	mullw	5
  1624  0002DA  0E04               	movlw	4
  1625  0002DC  26F3               	addwf	prodl,f,c
  1626  0002DE  0E00               	movlw	0
  1627  0002E0  22F4               	addwfc	prodh,f,c
  1628  0002E2  0E60               	movlw	low _remedio
  1629  0002E4  24F3               	addwf	prodl,w,c
  1630  0002E6  6EE1               	movwf	fsr1l,c
  1631  0002E8  0E00               	movlw	high _remedio
  1632  0002EA  20F4               	addwfc	prodh,w,c
  1633  0002EC  6EE2               	movwf	fsr1h,c
  1634  0002EE  50E7               	movf	indf1,w,c
  1635  0002F0  6F80               	movwf	??_atualiza_remedio& (0+255),b
  1636  0002F2  5180               	movf	??_atualiza_remedio& (0+255),w,b
  1637  0002F4  6F74               	movwf	___awmod@dividend& (0+255),b
  1638  0002F6  6B75               	clrf	(___awmod@dividend+1)& (0+255),b
  1639  0002F8  0E00               	movlw	0
  1640  0002FA  6F77               	movwf	(___awmod@divisor+1)& (0+255),b
  1641  0002FC  0E0A               	movlw	10
  1642  0002FE  6F76               	movwf	___awmod@divisor& (0+255),b
  1643  000300  EC03  F006         	call	___awmod	;wreg free
  1644  000304  C074  F081         	movff	?___awmod,??_atualiza_remedio+1
  1645  000308  C075  F082         	movff	?___awmod+1,??_atualiza_remedio+2
  1646  00030C  C03A  F074         	movff	_Hora,___awmod@dividend
  1647  000310  0100               	movlb	0	; () banked
  1648  000312  6B75               	clrf	(___awmod@dividend+1)& (0+255),b
  1649  000314  0E00               	movlw	0
  1650  000316  6F77               	movwf	(___awmod@divisor+1)& (0+255),b
  1651  000318  0E0A               	movlw	10
  1652  00031A  6F76               	movwf	___awmod@divisor& (0+255),b
  1653  00031C  EC03  F006         	call	___awmod	;wreg free
  1654  000320  0100               	movlb	0	; () banked
  1655  000322  5174               	movf	?___awmod& (0+255),w,b
  1656  000324  2581               	addwf	(??_atualiza_remedio+1)& (0+255),w,b
  1657  000326  6EDF               	movwf	indf2,c
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;funcs.c: 56: dados = (remedio[count].d_hora * 10 + remedio[count].u_hora);
  1661  000328  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1662  00032A  0D05               	mullw	5
  1663  00032C  0E01               	movlw	1
  1664  00032E  26F3               	addwf	prodl,f,c
  1665  000330  0E00               	movlw	0
  1666  000332  22F4               	addwfc	prodh,f,c
  1667  000334  0E60               	movlw	low _remedio
  1668  000336  24F3               	addwf	prodl,w,c
  1669  000338  6ED9               	movwf	fsr2l,c
  1670  00033A  0E00               	movlw	high _remedio
  1671  00033C  20F4               	addwfc	prodh,w,c
  1672  00033E  6EDA               	movwf	fsr2h,c
  1673  000340  50DF               	movf	indf2,w,c
  1674  000342  6F80               	movwf	??_atualiza_remedio& (0+255),b
  1675  000344  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1676  000346  0D05               	mullw	5
  1677  000348  0E60               	movlw	low _remedio
  1678  00034A  24F3               	addwf	prodl,w,c
  1679  00034C  6ED9               	movwf	fsr2l,c
  1680  00034E  0E00               	movlw	high _remedio
  1681  000350  20F4               	addwfc	prodh,w,c
  1682  000352  6EDA               	movwf	fsr2h,c
  1683  000354  50DF               	movf	indf2,w,c
  1684  000356  0D0A               	mullw	10
  1685  000358  50F3               	movf	prodl,w,c
  1686  00035A  2580               	addwf	??_atualiza_remedio& (0+255),w,b
  1687  00035C  6F83               	movwf	atualiza_remedio@dados& (0+255),b
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;funcs.c: 57: if( dados > 23)
  1691  00035E  0E17               	movlw	23
  1692  000360  6583               	cpfsgt	atualiza_remedio@dados& (0+255),b
  1693  000362  D003               	goto	l235
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;funcs.c: 58: {
  1697                           ;funcs.c: 59: dados = dados - 24;
  1698  000364  5183               	movf	atualiza_remedio@dados& (0+255),w,b
  1699  000366  0FE8               	addlw	232
  1700  000368  6F83               	movwf	atualiza_remedio@dados& (0+255),b
  1701  00036A                     l235:
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;funcs.c: 60: }
  1705                           ;funcs.c: 61: grava_eeprom(add_d_hora + count, dados/10);
  1706                           
  1707                           ; BSR set to: 0
  1708  00036A  502D               	movf	_add_d_hora,w,c
  1709  00036C  2584               	addwf	atualiza_remedio@count& (0+255),w,b
  1710  00036E  6F7C               	movwf	grava_eeprom@address& (0+255),b
  1711  000370  6B7D               	clrf	(grava_eeprom@address+1)& (0+255),b
  1712  000372  377D               	rlcf	(grava_eeprom@address+1)& (0+255),f,b
  1713  000374  C083  F074         	movff	atualiza_remedio@dados,___awdiv@dividend
  1714  000378  6B75               	clrf	(___awdiv@dividend+1)& (0+255),b
  1715  00037A  0E00               	movlw	0
  1716  00037C  6F77               	movwf	(___awdiv@divisor+1)& (0+255),b
  1717  00037E  0E0A               	movlw	10
  1718  000380  6F76               	movwf	___awdiv@divisor& (0+255),b
  1719  000382  EC7E  F005         	call	___awdiv	;wreg free
  1720  000386  0100               	movlb	0	; () banked
  1721  000388  5174               	movf	?___awdiv& (0+255),w,b
  1722  00038A  6F7E               	movwf	grava_eeprom@data& (0+255),b
  1723  00038C  EC06  F007         	call	_grava_eeprom	;wreg free
  1724                           
  1725                           ;funcs.c: 62: grava_eeprom(add_u_hora + count, dados%10);
  1726  000390  5039               	movf	_add_u_hora,w,c
  1727  000392  0100               	movlb	0	; () banked
  1728  000394  2584               	addwf	atualiza_remedio@count& (0+255),w,b
  1729  000396  6F7C               	movwf	grava_eeprom@address& (0+255),b
  1730  000398  6B7D               	clrf	(grava_eeprom@address+1)& (0+255),b
  1731  00039A  377D               	rlcf	(grava_eeprom@address+1)& (0+255),f,b
  1732  00039C  C083  F074         	movff	atualiza_remedio@dados,___awmod@dividend
  1733  0003A0  6B75               	clrf	(___awmod@dividend+1)& (0+255),b
  1734  0003A2  0E00               	movlw	0
  1735  0003A4  6F77               	movwf	(___awmod@divisor+1)& (0+255),b
  1736  0003A6  0E0A               	movlw	10
  1737  0003A8  6F76               	movwf	___awmod@divisor& (0+255),b
  1738  0003AA  EC03  F006         	call	___awmod	;wreg free
  1739  0003AE  0100               	movlb	0	; () banked
  1740  0003B0  5174               	movf	?___awmod& (0+255),w,b
  1741  0003B2  6F7E               	movwf	grava_eeprom@data& (0+255),b
  1742  0003B4  EC06  F007         	call	_grava_eeprom	;wreg free
  1743                           
  1744                           ;funcs.c: 63: remedio[count].d_hora = dados/10;
  1745  0003B8  0100               	movlb	0	; () banked
  1746  0003BA  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1747  0003BC  0D05               	mullw	5
  1748  0003BE  0E60               	movlw	low _remedio
  1749  0003C0  24F3               	addwf	prodl,w,c
  1750  0003C2  6ED9               	movwf	fsr2l,c
  1751  0003C4  0E00               	movlw	high _remedio
  1752  0003C6  20F4               	addwfc	prodh,w,c
  1753  0003C8  6EDA               	movwf	fsr2h,c
  1754  0003CA  C083  F074         	movff	atualiza_remedio@dados,___awdiv@dividend
  1755  0003CE  6B75               	clrf	(___awdiv@dividend+1)& (0+255),b
  1756  0003D0  0E00               	movlw	0
  1757  0003D2  6F77               	movwf	(___awdiv@divisor+1)& (0+255),b
  1758  0003D4  0E0A               	movlw	10
  1759  0003D6  6F76               	movwf	___awdiv@divisor& (0+255),b
  1760  0003D8  EC7E  F005         	call	___awdiv	;wreg free
  1761  0003DC  0100               	movlb	0	; () banked
  1762  0003DE  5174               	movf	?___awdiv& (0+255),w,b
  1763  0003E0  6EDF               	movwf	indf2,c
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;funcs.c: 64: remedio[count].u_hora = dados%10;
  1767  0003E2  5184               	movf	atualiza_remedio@count& (0+255),w,b
  1768  0003E4  0D05               	mullw	5
  1769  0003E6  0E01               	movlw	1
  1770  0003E8  26F3               	addwf	prodl,f,c
  1771  0003EA  0E00               	movlw	0
  1772  0003EC  22F4               	addwfc	prodh,f,c
  1773  0003EE  0E60               	movlw	low _remedio
  1774  0003F0  24F3               	addwf	prodl,w,c
  1775  0003F2  6ED9               	movwf	fsr2l,c
  1776  0003F4  0E00               	movlw	high _remedio
  1777  0003F6  20F4               	addwfc	prodh,w,c
  1778  0003F8  6EDA               	movwf	fsr2h,c
  1779  0003FA  C083  F074         	movff	atualiza_remedio@dados,___awmod@dividend
  1780  0003FE  6B75               	clrf	(___awmod@dividend+1)& (0+255),b
  1781  000400  0E00               	movlw	0
  1782  000402  6F77               	movwf	(___awmod@divisor+1)& (0+255),b
  1783  000404  0E0A               	movlw	10
  1784  000406  6F76               	movwf	___awmod@divisor& (0+255),b
  1785  000408  EC03  F006         	call	___awmod	;wreg free
  1786  00040C  0100               	movlb	0	; () banked
  1787  00040E  5174               	movf	?___awmod& (0+255),w,b
  1788  000410  6EDF               	movwf	indf2,c
  1789                           
  1790                           ; BSR set to: 0
  1791  000412  0012               	return		;funcret
  1792  000414                     __end_of_atualiza_remedio:
  1793                           	opt stack 0
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           prodh	equ	0xFF4
  1799                           prodl	equ	0xFF3
  1800                           intcon	equ	0xFF2
  1801                           intcon2	equ	0xFF1
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           indf1	equ	0xFE7
  1805                           postdec1	equ	0xFE5
  1806                           fsr1h	equ	0xFE2
  1807                           fsr1l	equ	0xFE1
  1808                           indf2	equ	0xFDF
  1809                           postinc2	equ	0xFDE
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _grava_eeprom *****************
  1815 ;; Defined at:
  1816 ;;		line 109 in file "funcs.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;  address         2    8[BANK0 ] int 
  1819 ;;  data            1   10[BANK0 ] unsigned char 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1831 ;;      Params:         0       3       0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1833 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1834 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1835 ;;Total ram usage:        4 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    4
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_atualiza_remedio
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text9
  1846  000E0C                     __ptext9:
  1847                           	opt stack 0
  1848  000E0C                     _grava_eeprom:
  1849                           	opt stack 24
  1850                           
  1851                           ;funcs.c: 112: EEADR = address;
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;incstack = 0
  1855  000E0C  C07C  FFA9         	movff	grava_eeprom@address,4009	;volatile
  1856                           
  1857                           ;funcs.c: 113: EEDATA = data;
  1858  000E10  C07E  FFA8         	movff	grava_eeprom@data,4008	;volatile
  1859                           
  1860                           ;funcs.c: 114: EECON1bits.EEPGD = 0;
  1861  000E14  9EA6               	bcf	4006,7,c	;volsfr
  1862                           
  1863                           ;funcs.c: 115: EECON1bits.CFGS = 0;
  1864  000E16  9CA6               	bcf	4006,6,c	;volsfr
  1865                           
  1866                           ;funcs.c: 116: EECON1bits.WREN = 1;
  1867  000E18  84A6               	bsf	4006,2,c	;volsfr
  1868                           
  1869                           ;funcs.c: 117: INTCONbits.GIE = 0;
  1870  000E1A  9EF2               	bcf	intcon,7,c	;volatile
  1871                           
  1872                           ;funcs.c: 119: EECON2 = 0x55;
  1873  000E1C  0E55               	movlw	85
  1874  000E1E  6EA7               	movwf	4007,c	;volsfr
  1875                           
  1876                           ;funcs.c: 120: EECON2 = 0xAA;
  1877  000E20  0EAA               	movlw	170
  1878  000E22  6EA7               	movwf	4007,c	;volsfr
  1879                           
  1880                           ;funcs.c: 122: EECON1bits.WR = 1;
  1881  000E24  82A6               	bsf	4006,1,c	;volsfr
  1882                           
  1883                           ;funcs.c: 123: INTCONbits.GIE = 1;
  1884  000E26  8EF2               	bsf	intcon,7,c	;volatile
  1885                           
  1886                           ;funcs.c: 125: PIR2bits.EEIF=0;
  1887  000E28  98A1               	bcf	4001,4,c	;volatile
  1888                           
  1889                           ;funcs.c: 126: EECON1bits.CFGS = 1;
  1890  000E2A  8CA6               	bsf	4006,6,c	;volsfr
  1891                           
  1892                           ;funcs.c: 127: _delay((unsigned long)((10)*(48000000/4000.0)));
  1893  000E2C  0E9C               	movlw	156
  1894  000E2E  0100               	movlb	0	; () banked
  1895  000E30  6F7F               	movwf	??_grava_eeprom& (0+255),b
  1896  000E32  0ED7               	movlw	215
  1897  000E34                     u1567:
  1898  000E34  2EE8               	decfsz	wreg,f,c
  1899  000E36  D7FE               	bra	u1567
  1900  000E38  2F7F               	decfsz	??_grava_eeprom& (0+255),f,b
  1901  000E3A  D7FC               	bra	u1567
  1902  000E3C  0012               	return		;funcret
  1903  000E3E                     __end_of_grava_eeprom:
  1904                           	opt stack 0
  1905                           tblptru	equ	0xFF8
  1906                           tblptrh	equ	0xFF7
  1907                           tblptrl	equ	0xFF6
  1908                           tablat	equ	0xFF5
  1909                           prodh	equ	0xFF4
  1910                           prodl	equ	0xFF3
  1911                           intcon	equ	0xFF2
  1912                           intcon2	equ	0xFF1
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           indf1	equ	0xFE7
  1916                           postdec1	equ	0xFE5
  1917                           fsr1h	equ	0xFE2
  1918                           fsr1l	equ	0xFE1
  1919                           indf2	equ	0xFDF
  1920                           postinc2	equ	0xFDE
  1921                           fsr2h	equ	0xFDA
  1922                           fsr2l	equ	0xFD9
  1923                           status	equ	0xFD8
  1924                           
  1925 ;; *************** function ___awmod *****************
  1926 ;; Defined at:
  1927 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  dividend        2    0[BANK0 ] int 
  1930 ;;  divisor         2    2[BANK0 ] int 
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;  sign            1    5[BANK0 ] unsigned char 
  1933 ;;  counter         1    4[BANK0 ] unsigned char 
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  2    0[BANK0 ] int 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1943 ;;      Params:         0       4       0       0       0       0       0       0       0
  1944 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1946 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1947 ;;Total ram usage:        6 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    4
  1950 ;; This function calls:
  1951 ;;		Nothing
  1952 ;; This function is called by:
  1953 ;;		_atualiza_remedio
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text10
  1958  000C06                     __ptext10:
  1959                           	opt stack 0
  1960  000C06                     ___awmod:
  1961                           	opt stack 24
  1962                           
  1963                           ;incstack = 0
  1964  000C06  0E00               	movlw	0
  1965  000C08  0100               	movlb	0	; () banked
  1966  000C0A  6F79               	movwf	___awmod@sign& (0+255),b
  1967                           
  1968                           ; BSR set to: 0
  1969  000C0C  AF75               	btfss	(___awmod@dividend+1)& (0+255),7,b
  1970  000C0E  D006               	goto	l497
  1971                           
  1972                           ; BSR set to: 0
  1973  000C10  6D74               	negf	___awmod@dividend& (0+255),b
  1974  000C12  1F75               	comf	(___awmod@dividend+1)& (0+255),f,b
  1975  000C14  B0D8               	btfsc	status,0,c
  1976  000C16  2B75               	incf	(___awmod@dividend+1)& (0+255),f,b
  1977                           
  1978                           ; BSR set to: 0
  1979  000C18  0E01               	movlw	1
  1980  000C1A  6F79               	movwf	___awmod@sign& (0+255),b
  1981  000C1C                     l497:
  1982                           
  1983                           ; BSR set to: 0
  1984                           
  1985                           ; BSR set to: 0
  1986  000C1C  AF77               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1987  000C1E  D004               	goto	l498
  1988                           
  1989                           ; BSR set to: 0
  1990  000C20  6D76               	negf	___awmod@divisor& (0+255),b
  1991  000C22  1F77               	comf	(___awmod@divisor+1)& (0+255),f,b
  1992  000C24  B0D8               	btfsc	status,0,c
  1993  000C26  2B77               	incf	(___awmod@divisor+1)& (0+255),f,b
  1994  000C28                     l498:
  1995                           
  1996                           ; BSR set to: 0
  1997                           
  1998                           ; BSR set to: 0
  1999  000C28  5176               	movf	___awmod@divisor& (0+255),w,b
  2000  000C2A  1177               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2001  000C2C  B4D8               	btfsc	status,2,c
  2002  000C2E  D018               	goto	l505
  2003                           
  2004                           ; BSR set to: 0
  2005  000C30  0E01               	movlw	1
  2006  000C32  6F78               	movwf	___awmod@counter& (0+255),b
  2007  000C34  D004               	goto	l500
  2008  000C36                     
  2009                           ; BSR set to: 0
  2010                           
  2011                           ; BSR set to: 0
  2012  000C36  90D8               	bcf	status,0,c
  2013  000C38  3776               	rlcf	___awmod@divisor& (0+255),f,b
  2014  000C3A  3777               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2015  000C3C  2B78               	incf	___awmod@counter& (0+255),f,b
  2016  000C3E                     l500:
  2017                           
  2018                           ; BSR set to: 0
  2019                           
  2020                           ; BSR set to: 0
  2021  000C3E  AF77               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2022  000C40  D7FA               	goto	l501
  2023  000C42                     u1300:
  2024                           
  2025                           ; BSR set to: 0
  2026                           
  2027                           ; BSR set to: 0
  2028                           
  2029                           ; BSR set to: 0
  2030  000C42  5176               	movf	___awmod@divisor& (0+255),w,b
  2031  000C44  5D74               	subwf	___awmod@dividend& (0+255),w,b
  2032  000C46  5177               	movf	(___awmod@divisor+1)& (0+255),w,b
  2033  000C48  5975               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2034  000C4A  A0D8               	btfss	status,0,c
  2035  000C4C  D004               	goto	l504
  2036                           
  2037                           ; BSR set to: 0
  2038  000C4E  5176               	movf	___awmod@divisor& (0+255),w,b
  2039  000C50  5F74               	subwf	___awmod@dividend& (0+255),f,b
  2040  000C52  5177               	movf	(___awmod@divisor+1)& (0+255),w,b
  2041  000C54  5B75               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2042  000C56                     l504:
  2043                           
  2044                           ; BSR set to: 0
  2045                           
  2046                           ; BSR set to: 0
  2047  000C56  90D8               	bcf	status,0,c
  2048  000C58  3377               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2049  000C5A  3376               	rrcf	___awmod@divisor& (0+255),f,b
  2050                           
  2051                           ; BSR set to: 0
  2052  000C5C  2F78               	decfsz	___awmod@counter& (0+255),f,b
  2053  000C5E  D7F1               	goto	u1300
  2054  000C60                     l505:
  2055                           
  2056                           ; BSR set to: 0
  2057                           
  2058                           ; BSR set to: 0
  2059                           
  2060                           ; BSR set to: 0
  2061  000C60  5179               	movf	___awmod@sign& (0+255),w,b
  2062  000C62  B4D8               	btfsc	status,2,c
  2063  000C64  D004               	goto	l506
  2064                           
  2065                           ; BSR set to: 0
  2066  000C66  6D74               	negf	___awmod@dividend& (0+255),b
  2067  000C68  1F75               	comf	(___awmod@dividend+1)& (0+255),f,b
  2068  000C6A  B0D8               	btfsc	status,0,c
  2069  000C6C  2B75               	incf	(___awmod@dividend+1)& (0+255),f,b
  2070  000C6E                     l506:
  2071                           
  2072                           ; BSR set to: 0
  2073                           
  2074                           ; BSR set to: 0
  2075  000C6E  C074  F074         	movff	___awmod@dividend,?___awmod
  2076  000C72  C075  F075         	movff	___awmod@dividend+1,?___awmod+1
  2077  000C76  0012               	return	
  2078  000C78                     __end_of___awmod:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           prodh	equ	0xFF4
  2085                           prodl	equ	0xFF3
  2086                           intcon	equ	0xFF2
  2087                           intcon2	equ	0xFF1
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           indf1	equ	0xFE7
  2091                           postdec1	equ	0xFE5
  2092                           fsr1h	equ	0xFE2
  2093                           fsr1l	equ	0xFE1
  2094                           indf2	equ	0xFDF
  2095                           postinc2	equ	0xFDE
  2096                           fsr2h	equ	0xFDA
  2097                           fsr2l	equ	0xFD9
  2098                           status	equ	0xFD8
  2099                           
  2100 ;; *************** function ___awdiv *****************
  2101 ;; Defined at:
  2102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  dividend        2    0[BANK0 ] int 
  2105 ;;  divisor         2    2[BANK0 ] int 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  quotient        2    6[BANK0 ] int 
  2108 ;;  sign            1    5[BANK0 ] unsigned char 
  2109 ;;  counter         1    4[BANK0 ] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  2    0[BANK0 ] int 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2119 ;;      Params:         0       4       0       0       0       0       0       0       0
  2120 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2122 ;;      Totals:         0       8       0       0       0       0       0       0       0
  2123 ;;Total ram usage:        8 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    4
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_atualiza_remedio
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text11
  2134  000AFC                     __ptext11:
  2135                           	opt stack 0
  2136  000AFC                     ___awdiv:
  2137                           	opt stack 24
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;incstack = 0
  2141  000AFC  0E00               	movlw	0
  2142  000AFE  0100               	movlb	0	; () banked
  2143  000B00  6F79               	movwf	___awdiv@sign& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146  000B02  AF77               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2147  000B04  D006               	goto	l484
  2148                           
  2149                           ; BSR set to: 0
  2150  000B06  6D76               	negf	___awdiv@divisor& (0+255),b
  2151  000B08  1F77               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2152  000B0A  B0D8               	btfsc	status,0,c
  2153  000B0C  2B77               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2154                           
  2155                           ; BSR set to: 0
  2156  000B0E  0E01               	movlw	1
  2157  000B10  6F79               	movwf	___awdiv@sign& (0+255),b
  2158  000B12                     l484:
  2159                           
  2160                           ; BSR set to: 0
  2161                           
  2162                           ; BSR set to: 0
  2163  000B12  AF75               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2164  000B14  D006               	goto	l485
  2165                           
  2166                           ; BSR set to: 0
  2167  000B16  6D74               	negf	___awdiv@dividend& (0+255),b
  2168  000B18  1F75               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2169  000B1A  B0D8               	btfsc	status,0,c
  2170  000B1C  2B75               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2171                           
  2172                           ; BSR set to: 0
  2173  000B1E  0E01               	movlw	1
  2174  000B20  1B79               	xorwf	___awdiv@sign& (0+255),f,b
  2175  000B22                     l485:
  2176                           
  2177                           ; BSR set to: 0
  2178                           
  2179                           ; BSR set to: 0
  2180  000B22  0E00               	movlw	0
  2181  000B24  6F7B               	movwf	(___awdiv@quotient+1)& (0+255),b
  2182  000B26  0E00               	movlw	0
  2183  000B28  6F7A               	movwf	___awdiv@quotient& (0+255),b
  2184                           
  2185                           ; BSR set to: 0
  2186  000B2A  5176               	movf	___awdiv@divisor& (0+255),w,b
  2187  000B2C  1177               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2188  000B2E  B4D8               	btfsc	status,2,c
  2189  000B30  D01C               	goto	l492
  2190                           
  2191                           ; BSR set to: 0
  2192  000B32  0E01               	movlw	1
  2193  000B34  6F78               	movwf	___awdiv@counter& (0+255),b
  2194  000B36  D004               	goto	l487
  2195  000B38                     
  2196                           ; BSR set to: 0
  2197                           
  2198                           ; BSR set to: 0
  2199  000B38  90D8               	bcf	status,0,c
  2200  000B3A  3776               	rlcf	___awdiv@divisor& (0+255),f,b
  2201  000B3C  3777               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2202  000B3E  2B78               	incf	___awdiv@counter& (0+255),f,b
  2203  000B40                     l487:
  2204                           
  2205                           ; BSR set to: 0
  2206                           
  2207                           ; BSR set to: 0
  2208  000B40  AF77               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2209  000B42  D7FA               	goto	l488
  2210  000B44                     u1240:
  2211                           
  2212                           ; BSR set to: 0
  2213                           
  2214                           ; BSR set to: 0
  2215                           
  2216                           ; BSR set to: 0
  2217  000B44  90D8               	bcf	status,0,c
  2218  000B46  377A               	rlcf	___awdiv@quotient& (0+255),f,b
  2219  000B48  377B               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2220                           
  2221                           ; BSR set to: 0
  2222  000B4A  5176               	movf	___awdiv@divisor& (0+255),w,b
  2223  000B4C  5D74               	subwf	___awdiv@dividend& (0+255),w,b
  2224  000B4E  5177               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2225  000B50  5975               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2226  000B52  A0D8               	btfss	status,0,c
  2227  000B54  D005               	goto	l491
  2228                           
  2229                           ; BSR set to: 0
  2230  000B56  5176               	movf	___awdiv@divisor& (0+255),w,b
  2231  000B58  5F74               	subwf	___awdiv@dividend& (0+255),f,b
  2232  000B5A  5177               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2233  000B5C  5B75               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2234                           
  2235                           ; BSR set to: 0
  2236  000B5E  817A               	bsf	___awdiv@quotient& (0+255),0,b
  2237  000B60                     l491:
  2238                           
  2239                           ; BSR set to: 0
  2240                           
  2241                           ; BSR set to: 0
  2242  000B60  90D8               	bcf	status,0,c
  2243  000B62  3377               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2244  000B64  3376               	rrcf	___awdiv@divisor& (0+255),f,b
  2245                           
  2246                           ; BSR set to: 0
  2247  000B66  2F78               	decfsz	___awdiv@counter& (0+255),f,b
  2248  000B68  D7ED               	goto	u1240
  2249  000B6A                     l492:
  2250                           
  2251                           ; BSR set to: 0
  2252                           
  2253                           ; BSR set to: 0
  2254                           
  2255                           ; BSR set to: 0
  2256  000B6A  5179               	movf	___awdiv@sign& (0+255),w,b
  2257  000B6C  B4D8               	btfsc	status,2,c
  2258  000B6E  D004               	goto	l493
  2259                           
  2260                           ; BSR set to: 0
  2261  000B70  6D7A               	negf	___awdiv@quotient& (0+255),b
  2262  000B72  1F7B               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2263  000B74  B0D8               	btfsc	status,0,c
  2264  000B76  2B7B               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2265  000B78                     l493:
  2266                           
  2267                           ; BSR set to: 0
  2268                           
  2269                           ; BSR set to: 0
  2270  000B78  C07A  F074         	movff	___awdiv@quotient,?___awdiv
  2271  000B7C  C07B  F075         	movff	___awdiv@quotient+1,?___awdiv+1
  2272  000B80  0012               	return	
  2273  000B82                     __end_of___awdiv:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           intcon	equ	0xFF2
  2282                           intcon2	equ	0xFF1
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           indf1	equ	0xFE7
  2286                           postdec1	equ	0xFE5
  2287                           fsr1h	equ	0xFE2
  2288                           fsr1l	equ	0xFE1
  2289                           indf2	equ	0xFDF
  2290                           postinc2	equ	0xFDE
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _serial *****************
  2296 ;; Defined at:
  2297 ;;		line 281 in file "funcs.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0
  2312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2313 ;;      Temps:         19       0       0       0       0       0       0       0       0
  2314 ;;      Totals:        19       0       0       0       0       0       0       0       0
  2315 ;;Total ram usage:       19 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    3
  2318 ;; This function calls:
  2319 ;;		_cadastra_relogio
  2320 ;;		_comunica
  2321 ;;		_envia_teste
  2322 ;;		_incrementa_min
  2323 ;;		_verifica
  2324 ;; This function is called by:
  2325 ;;		Interrupt level 2
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	intcode
  2330  000008                     __pintcode:
  2331                           	opt stack 0
  2332  000008                     _serial:
  2333                           	opt stack 24
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;incstack = 0
  2337  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2338  00000A  ED0A  F002         	call	int_func,f	;refresh shadow registers
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           prodh	equ	0xFF4
  2344                           prodl	equ	0xFF3
  2345                           intcon	equ	0xFF2
  2346                           intcon2	equ	0xFF1
  2347                           postinc0	equ	0xFEE
  2348                           wreg	equ	0xFE8
  2349                           indf1	equ	0xFE7
  2350                           postdec1	equ	0xFE5
  2351                           fsr1h	equ	0xFE2
  2352                           fsr1l	equ	0xFE1
  2353                           indf2	equ	0xFDF
  2354                           postinc2	equ	0xFDE
  2355                           fsr2h	equ	0xFDA
  2356                           fsr2l	equ	0xFD9
  2357                           status	equ	0xFD8
  2358                           
  2359                           	psect	intcode_body
  2360  000414                     __pintcode_body:
  2361                           	opt stack 24
  2362  000414                     int_func:
  2363                           	opt stack 24
  2364  000414  0006               	pop		; remove dummy address from shadow register refresh
  2365  000416  CFFA F012          	movff	pclath,??_serial+1
  2366  00041A  CFFB F013          	movff	pclatu,??_serial+2
  2367  00041E  CFE9 F014          	movff	fsr0l,??_serial+3
  2368  000422  CFEA F015          	movff	fsr0h,??_serial+4
  2369  000426  CFE1 F016          	movff	fsr1l,??_serial+5
  2370  00042A  CFE2 F017          	movff	fsr1h,??_serial+6
  2371  00042E  CFD9 F018          	movff	fsr2l,??_serial+7
  2372  000432  CFDA F019          	movff	fsr2h,??_serial+8
  2373  000436  CFF3 F01A          	movff	prodl,??_serial+9
  2374  00043A  CFF4 F01B          	movff	prodh,??_serial+10
  2375  00043E  CFF6 F01C          	movff	tblptrl,??_serial+11
  2376  000442  CFF7 F01D          	movff	tblptrh,??_serial+12
  2377  000446  CFF8 F01E          	movff	tblptru,??_serial+13
  2378  00044A  CFF5 F01F          	movff	tablat,??_serial+14
  2379  00044E  C03C  F020         	movff	btemp,??_serial+15
  2380  000452  C03D  F021         	movff	btemp+1,??_serial+16
  2381  000456  C03E  F022         	movff	btemp+2,??_serial+17
  2382  00045A  C03F  F023         	movff	btemp+3,??_serial+18
  2383                           
  2384                           ;funcs.c: 283: if(INT0IF == 1)
  2385  00045E  A2F2               	btfss	intcon,1,c	;volatile
  2386  000460  D015               	goto	i2l302
  2387                           
  2388                           ;funcs.c: 284: {
  2389                           ;funcs.c: 285: INT0IF = 0;
  2390  000462  92F2               	bcf	intcon,1,c	;volatile
  2391                           
  2392                           ;funcs.c: 286: if(botao == 0)
  2393  000464  502F               	movf	_botao,w,c
  2394  000466  A4D8               	btfss	status,2,c
  2395  000468  D011               	goto	i2l302
  2396                           
  2397                           ;funcs.c: 287: {
  2398                           ;funcs.c: 288: if(libera)
  2399  00046A  5033               	movf	_libera,w,c
  2400  00046C  B4D8               	btfsc	status,2,c
  2401  00046E  D00A               	goto	i2l303
  2402                           
  2403                           ;funcs.c: 289: pendencia_remedio[in] = 0;
  2404  000470  5034               	movf	_in,w,c
  2405  000472  0D01               	mullw	1
  2406  000474  0E29               	movlw	low _pendencia_remedio
  2407  000476  24F3               	addwf	prodl,w,c
  2408  000478  6ED9               	movwf	fsr2l,c
  2409  00047A  0E00               	movlw	high _pendencia_remedio
  2410  00047C  20F4               	addwfc	prodh,w,c
  2411  00047E  6EDA               	movwf	fsr2h,c
  2412  000480  0E00               	movlw	0
  2413  000482  6EDF               	movwf	indf2,c
  2414  000484                     i2l303:
  2415                           
  2416                           ;funcs.c: 290: botao = 1;
  2417  000484  0E01               	movlw	1
  2418  000486  6E2F               	movwf	_botao,c
  2419                           
  2420                           ;funcs.c: 291: libera = 1;
  2421  000488  0E01               	movlw	1
  2422  00048A  6E33               	movwf	_libera,c
  2423  00048C                     i2l302:
  2424                           
  2425                           ;funcs.c: 292: }
  2426                           ;funcs.c: 294: }
  2427                           ;funcs.c: 296: if(TMR0IF == 1)
  2428  00048C  A4F2               	btfss	intcon,2,c	;volatile
  2429  00048E  D02A               	goto	i2l308
  2430                           
  2431                           ;funcs.c: 297: {
  2432                           ;funcs.c: 298: TMR0 = 0x48E4;
  2433  000490  0E48               	movlw	72
  2434  000492  6ED7               	movwf	4055,c	;volatile
  2435  000494  0EE4               	movlw	228
  2436  000496  6ED6               	movwf	4054,c	;volatile
  2437                           
  2438                           ;funcs.c: 299: TMR0IF = 0;
  2439  000498  94F2               	bcf	intcon,2,c	;volatile
  2440                           
  2441                           ;funcs.c: 300: seg++;
  2442  00049A  2A2E               	incf	_seg,f,c
  2443                           
  2444                           ;funcs.c: 301: if(PORTBbits.RB0 == 1)
  2445  00049C  A081               	btfss	3969,0,c	;volatile
  2446  00049E  D002               	goto	i2l305
  2447                           
  2448                           ;funcs.c: 302: botao = 0;
  2449  0004A0  0E00               	movlw	0
  2450  0004A2  6E2F               	movwf	_botao,c
  2451  0004A4                     i2l305:
  2452                           
  2453                           ;funcs.c: 304: if(seg == 60)
  2454  0004A4  0E3C               	movlw	60
  2455  0004A6  182E               	xorwf	_seg,w,c
  2456  0004A8  A4D8               	btfss	status,2,c
  2457  0004AA  D006               	goto	i2l306
  2458                           
  2459                           ;funcs.c: 305: {
  2460                           ;funcs.c: 306: incrementa_min();
  2461  0004AC  EC49  F007         	call	_incrementa_min	;wreg free
  2462                           
  2463                           ;funcs.c: 307: cadastra_relogio();
  2464  0004B0  EC9C  F004         	call	_cadastra_relogio	;wreg free
  2465                           
  2466                           ;funcs.c: 308: seg = 0;
  2467  0004B4  0E00               	movlw	0
  2468  0004B6  6E2E               	movwf	_seg,c
  2469  0004B8                     i2l306:
  2470                           
  2471                           ;funcs.c: 309: }
  2472                           ;funcs.c: 310: if(seg == 0)
  2473  0004B8  502E               	movf	_seg,w,c
  2474  0004BA  B4D8               	btfsc	status,2,c
  2475                           
  2476                           ;funcs.c: 311: {
  2477                           ;funcs.c: 312: verifica();
  2478  0004BC  EC42  F003         	call	_verifica	;wreg free
  2479                           
  2480                           ;funcs.c: 313: }
  2481                           ;funcs.c: 314: envia_teste();
  2482  0004C0  EC3C  F004         	call	_envia_teste	;wreg free
  2483                           
  2484                           ;funcs.c: 315: if(led == 1)
  2485  0004C4  0430               	decf	_led,w,c
  2486  0004C6  A4D8               	btfss	status,2,c
  2487  0004C8  D00D               	goto	i2l308
  2488                           
  2489                           ;funcs.c: 316: {
  2490                           ;funcs.c: 317: PORTAbits.RA1 = ~PORTAbits.RA1;
  2491  0004CA  A280               	btfss	3968,1,c	;volatile
  2492  0004CC  D002               	goto	i2u118_40
  2493  0004CE  0E01               	movlw	1
  2494  0004D0  D001               	goto	i2u118_46
  2495  0004D2                     i2u118_40:
  2496  0004D2  0E00               	movlw	0
  2497  0004D4                     i2u118_46:
  2498  0004D4  0AFF               	xorlw	255
  2499  0004D6  6E11               	movwf	??_serial& (0+255),c
  2500  0004D8  4611               	rlncf	??_serial,f,c
  2501  0004DA  5080               	movf	3968,w,c	;volatile
  2502  0004DC  1811               	xorwf	??_serial,w,c
  2503  0004DE  0BFD               	andlw	-3
  2504  0004E0  1811               	xorwf	??_serial,w,c
  2505  0004E2  6E80               	movwf	3968,c	;volatile
  2506  0004E4                     i2l308:
  2507                           
  2508                           ;funcs.c: 318: }
  2509                           ;funcs.c: 319: }
  2510                           ;funcs.c: 321: if(RCIF == 1)
  2511  0004E4  AA9E               	btfss	3998,5,c	;volatile
  2512  0004E6  D013               	goto	i2l310
  2513                           
  2514                           ;funcs.c: 322: {
  2515                           ;funcs.c: 323: RCIF = 0;
  2516  0004E8  9A9E               	bcf	3998,5,c	;volatile
  2517                           
  2518                           ;funcs.c: 324: string[flag] = RCREG;
  2519  0004EA  5032               	movf	_flag,w,c
  2520  0004EC  0D01               	mullw	1
  2521  0004EE  0E24               	movlw	low _string
  2522  0004F0  24F3               	addwf	prodl,w,c
  2523  0004F2  6ED9               	movwf	fsr2l,c
  2524  0004F4  0E00               	movlw	high _string
  2525  0004F6  20F4               	addwfc	prodh,w,c
  2526  0004F8  6EDA               	movwf	fsr2h,c
  2527  0004FA  CFAE FFDF          	movff	4014,indf2	;volatile
  2528                           
  2529                           ;funcs.c: 325: flag++;
  2530  0004FE  2A32               	incf	_flag,f,c
  2531                           
  2532                           ;funcs.c: 326: if(flag >= 5)
  2533  000500  0E04               	movlw	4
  2534  000502  6432               	cpfsgt	_flag,c
  2535  000504  D004               	goto	i2l310
  2536                           
  2537                           ;funcs.c: 327: {
  2538                           ;funcs.c: 328: flag = 0;
  2539  000506  0E00               	movlw	0
  2540  000508  6E32               	movwf	_flag,c
  2541                           
  2542                           ;funcs.c: 329: comunica();
  2543  00050A  EC09  F000         	call	_comunica	;wreg free
  2544  00050E                     i2l310:
  2545  00050E  C023  F03F         	movff	??_serial+18,btemp+3
  2546  000512  C022  F03E         	movff	??_serial+17,btemp+2
  2547  000516  C021  F03D         	movff	??_serial+16,btemp+1
  2548  00051A  C020  F03C         	movff	??_serial+15,btemp
  2549  00051E  C01F  FFF5         	movff	??_serial+14,tablat
  2550  000522  C01E  FFF8         	movff	??_serial+13,tblptru
  2551  000526  C01D  FFF7         	movff	??_serial+12,tblptrh
  2552  00052A  C01C  FFF6         	movff	??_serial+11,tblptrl
  2553  00052E  C01B  FFF4         	movff	??_serial+10,prodh
  2554  000532  C01A  FFF3         	movff	??_serial+9,prodl
  2555  000536  C019  FFDA         	movff	??_serial+8,fsr2h
  2556  00053A  C018  FFD9         	movff	??_serial+7,fsr2l
  2557  00053E  C017  FFE2         	movff	??_serial+6,fsr1h
  2558  000542  C016  FFE1         	movff	??_serial+5,fsr1l
  2559  000546  C015  FFEA         	movff	??_serial+4,fsr0h
  2560  00054A  C014  FFE9         	movff	??_serial+3,fsr0l
  2561  00054E  C013  FFFB         	movff	??_serial+2,pclatu
  2562  000552  C012  FFFA         	movff	??_serial+1,pclath
  2563  000556  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2564  000558  0011               	retfie		f
  2565  00055A                     __end_of_serial:
  2566                           	opt stack 0
  2567                           pclatu	equ	0xFFB
  2568                           pclath	equ	0xFFA
  2569                           tblptru	equ	0xFF8
  2570                           tblptrh	equ	0xFF7
  2571                           tblptrl	equ	0xFF6
  2572                           tablat	equ	0xFF5
  2573                           prodh	equ	0xFF4
  2574                           prodl	equ	0xFF3
  2575                           intcon	equ	0xFF2
  2576                           intcon2	equ	0xFF1
  2577                           postinc0	equ	0xFEE
  2578                           fsr0h	equ	0xFEA
  2579                           fsr0l	equ	0xFE9
  2580                           wreg	equ	0xFE8
  2581                           indf1	equ	0xFE7
  2582                           postdec1	equ	0xFE5
  2583                           fsr1h	equ	0xFE2
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _verifica *****************
  2592 ;; Defined at:
  2593 ;;		line 22 in file "funcs.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  count           1   10[COMRAM] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2607 ;;      Params:         0       0       0       0       0       0       0       0       0
  2608 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2609 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2610 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2611 ;;Total ram usage:        3 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    1
  2614 ;; This function calls:
  2615 ;;		i2___awdiv
  2616 ;;		i2___awmod
  2617 ;; This function is called by:
  2618 ;;		_serial
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text13
  2623  000684                     __ptext13:
  2624                           	opt stack 0
  2625  000684                     _verifica:
  2626                           	opt stack 25
  2627                           
  2628                           ;funcs.c: 24: char count;
  2629                           ;funcs.c: 25: for(count = 0; count < 4; count++)
  2630                           
  2631                           ;incstack = 0
  2632  000684  0E00               	movlw	0
  2633  000686  6E0B               	movwf	verifica@count,c
  2634  000688                     i2l1778:
  2635  000688  0E03               	movlw	3
  2636  00068A  640B               	cpfsgt	verifica@count,c
  2637  00068C  D001               	goto	i2l223
  2638  00068E  0012               	return	
  2639  000690                     i2l223:
  2640                           
  2641                           ;funcs.c: 26: {
  2642                           ;funcs.c: 27: if((remedio[count].d_hora) == (Hora/10) && (remedio[count].u_hora) == (Hor
      +                          a%10))
  2643  000690  C03A  F001         	movff	_Hora,i2___awdiv@dividend
  2644  000694  6A02               	clrf	i2___awdiv@dividend+1,c
  2645  000696  0E00               	movlw	0
  2646  000698  6E04               	movwf	i2___awdiv@divisor+1,c
  2647  00069A  0E0A               	movlw	10
  2648  00069C  6E03               	movwf	i2___awdiv@divisor,c
  2649  00069E  ECC1  F005         	call	i2___awdiv	;wreg free
  2650  0006A2  500B               	movf	verifica@count,w,c
  2651  0006A4  0D05               	mullw	5
  2652  0006A6  0E60               	movlw	low _remedio
  2653  0006A8  24F3               	addwf	prodl,w,c
  2654  0006AA  6ED9               	movwf	fsr2l,c
  2655  0006AC  0E00               	movlw	high _remedio
  2656  0006AE  20F4               	addwfc	prodh,w,c
  2657  0006B0  6EDA               	movwf	fsr2h,c
  2658  0006B2  50DF               	movf	indf2,w,c
  2659  0006B4  6E09               	movwf	??_verifica& (0+255),c
  2660  0006B6  6A0A               	clrf	(??_verifica+1)& (0+255),c
  2661  0006B8  5001               	movf	?i2___awdiv,w,c
  2662  0006BA  1809               	xorwf	??_verifica,w,c
  2663  0006BC  E16D               	bnz	i2l1794
  2664  0006BE  5002               	movf	?i2___awdiv+1,w,c
  2665  0006C0  180A               	xorwf	??_verifica+1,w,c
  2666  0006C2  A4D8               	btfss	status,2,c
  2667  0006C4  D069               	goto	i2l226
  2668  0006C6  C03A  F001         	movff	_Hora,i2___awmod@dividend
  2669  0006CA  6A02               	clrf	i2___awmod@dividend+1,c
  2670  0006CC  0E00               	movlw	0
  2671  0006CE  6E04               	movwf	i2___awmod@divisor+1,c
  2672  0006D0  0E0A               	movlw	10
  2673  0006D2  6E03               	movwf	i2___awmod@divisor,c
  2674  0006D4  EC3C  F006         	call	i2___awmod	;wreg free
  2675  0006D8  500B               	movf	verifica@count,w,c
  2676  0006DA  0D05               	mullw	5
  2677  0006DC  0E01               	movlw	1
  2678  0006DE  26F3               	addwf	prodl,f,c
  2679  0006E0  0E00               	movlw	0
  2680  0006E2  22F4               	addwfc	prodh,f,c
  2681  0006E4  0E60               	movlw	low _remedio
  2682  0006E6  24F3               	addwf	prodl,w,c
  2683  0006E8  6ED9               	movwf	fsr2l,c
  2684  0006EA  0E00               	movlw	high _remedio
  2685  0006EC  20F4               	addwfc	prodh,w,c
  2686  0006EE  6EDA               	movwf	fsr2h,c
  2687  0006F0  50DF               	movf	indf2,w,c
  2688  0006F2  6E09               	movwf	??_verifica& (0+255),c
  2689  0006F4  6A0A               	clrf	(??_verifica+1)& (0+255),c
  2690  0006F6  5001               	movf	?i2___awmod,w,c
  2691  0006F8  1809               	xorwf	??_verifica,w,c
  2692  0006FA  E14E               	bnz	i2l1794
  2693  0006FC  5002               	movf	?i2___awmod+1,w,c
  2694  0006FE  180A               	xorwf	??_verifica+1,w,c
  2695  000700  A4D8               	btfss	status,2,c
  2696  000702  D04A               	goto	i2l226
  2697                           
  2698                           ;funcs.c: 28: {
  2699                           ;funcs.c: 29: if((remedio[count].d_minuto) == (Min/10) && (remedio[count].u_minuto) == (
      +                          Min%10 ))
  2700  000704  C03B  F001         	movff	_Min,i2___awdiv@dividend
  2701  000708  6A02               	clrf	i2___awdiv@dividend+1,c
  2702  00070A  0E00               	movlw	0
  2703  00070C  6E04               	movwf	i2___awdiv@divisor+1,c
  2704  00070E  0E0A               	movlw	10
  2705  000710  6E03               	movwf	i2___awdiv@divisor,c
  2706  000712  ECC1  F005         	call	i2___awdiv	;wreg free
  2707  000716  500B               	movf	verifica@count,w,c
  2708  000718  0D05               	mullw	5
  2709  00071A  0E02               	movlw	2
  2710  00071C  26F3               	addwf	prodl,f,c
  2711  00071E  0E00               	movlw	0
  2712  000720  22F4               	addwfc	prodh,f,c
  2713  000722  0E60               	movlw	low _remedio
  2714  000724  24F3               	addwf	prodl,w,c
  2715  000726  6ED9               	movwf	fsr2l,c
  2716  000728  0E00               	movlw	high _remedio
  2717  00072A  20F4               	addwfc	prodh,w,c
  2718  00072C  6EDA               	movwf	fsr2h,c
  2719  00072E  50DF               	movf	indf2,w,c
  2720  000730  6E09               	movwf	??_verifica& (0+255),c
  2721  000732  6A0A               	clrf	(??_verifica+1)& (0+255),c
  2722  000734  5001               	movf	?i2___awdiv,w,c
  2723  000736  1809               	xorwf	??_verifica,w,c
  2724  000738  E12F               	bnz	i2l1794
  2725  00073A  5002               	movf	?i2___awdiv+1,w,c
  2726  00073C  180A               	xorwf	??_verifica+1,w,c
  2727  00073E  A4D8               	btfss	status,2,c
  2728  000740  D02B               	goto	i2l226
  2729  000742  C03B  F001         	movff	_Min,i2___awmod@dividend
  2730  000746  6A02               	clrf	i2___awmod@dividend+1,c
  2731  000748  0E00               	movlw	0
  2732  00074A  6E04               	movwf	i2___awmod@divisor+1,c
  2733  00074C  0E0A               	movlw	10
  2734  00074E  6E03               	movwf	i2___awmod@divisor,c
  2735  000750  EC3C  F006         	call	i2___awmod	;wreg free
  2736  000754  500B               	movf	verifica@count,w,c
  2737  000756  0D05               	mullw	5
  2738  000758  0E03               	movlw	3
  2739  00075A  26F3               	addwf	prodl,f,c
  2740  00075C  0E00               	movlw	0
  2741  00075E  22F4               	addwfc	prodh,f,c
  2742  000760  0E60               	movlw	low _remedio
  2743  000762  24F3               	addwf	prodl,w,c
  2744  000764  6ED9               	movwf	fsr2l,c
  2745  000766  0E00               	movlw	high _remedio
  2746  000768  20F4               	addwfc	prodh,w,c
  2747  00076A  6EDA               	movwf	fsr2h,c
  2748  00076C  50DF               	movf	indf2,w,c
  2749  00076E  6E09               	movwf	??_verifica& (0+255),c
  2750  000770  6A0A               	clrf	(??_verifica+1)& (0+255),c
  2751  000772  5001               	movf	?i2___awmod,w,c
  2752  000774  1809               	xorwf	??_verifica,w,c
  2753  000776  E110               	bnz	i2l1794
  2754  000778  5002               	movf	?i2___awmod+1,w,c
  2755  00077A  180A               	xorwf	??_verifica+1,w,c
  2756  00077C  A4D8               	btfss	status,2,c
  2757  00077E  D00C               	goto	i2l226
  2758                           
  2759                           ;funcs.c: 30: {
  2760                           ;funcs.c: 31: pendencia_remedio[count] = 1;
  2761  000780  500B               	movf	verifica@count,w,c
  2762  000782  0D01               	mullw	1
  2763  000784  0E29               	movlw	low _pendencia_remedio
  2764  000786  24F3               	addwf	prodl,w,c
  2765  000788  6ED9               	movwf	fsr2l,c
  2766  00078A  0E00               	movlw	high _pendencia_remedio
  2767  00078C  20F4               	addwfc	prodh,w,c
  2768  00078E  6EDA               	movwf	fsr2h,c
  2769  000790  0E01               	movlw	1
  2770  000792  6EDF               	movwf	indf2,c
  2771                           
  2772                           ;funcs.c: 32: led = 1;
  2773  000794  0E01               	movlw	1
  2774  000796  6E30               	movwf	_led,c
  2775  000798                     i2l226:
  2776  000798                     i2l1794:
  2777  000798  2A0B               	incf	verifica@count,f,c
  2778  00079A  D776               	goto	i2l1778
  2779  00079C                     __end_of_verifica:
  2780                           	opt stack 0
  2781                           pclatu	equ	0xFFB
  2782                           pclath	equ	0xFFA
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           prodh	equ	0xFF4
  2788                           prodl	equ	0xFF3
  2789                           intcon	equ	0xFF2
  2790                           intcon2	equ	0xFF1
  2791                           postinc0	equ	0xFEE
  2792                           fsr0h	equ	0xFEA
  2793                           fsr0l	equ	0xFE9
  2794                           wreg	equ	0xFE8
  2795                           indf1	equ	0xFE7
  2796                           postdec1	equ	0xFE5
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           postinc2	equ	0xFDE
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _incrementa_min *****************
  2806 ;; Defined at:
  2807 ;;		line 193 in file "funcs.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         0       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        0 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_serial
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text14
  2835  000E92                     __ptext14:
  2836                           	opt stack 0
  2837  000E92                     _incrementa_min:
  2838                           	opt stack 26
  2839                           
  2840                           ;funcs.c: 195: Min++;
  2841                           
  2842                           ;incstack = 0
  2843  000E92  2A3B               	incf	_Min,f,c
  2844                           
  2845                           ;funcs.c: 196: if(Min == 60)
  2846  000E94  0E3C               	movlw	60
  2847  000E96  183B               	xorwf	_Min,w,c
  2848  000E98  A4D8               	btfss	status,2,c
  2849  000E9A  0012               	return	
  2850                           
  2851                           ;funcs.c: 197: {
  2852                           ;funcs.c: 198: Hora++;
  2853  000E9C  2A3A               	incf	_Hora,f,c
  2854                           
  2855                           ;funcs.c: 199: Min = 0;
  2856  000E9E  0E00               	movlw	0
  2857  000EA0  6E3B               	movwf	_Min,c
  2858                           
  2859                           ;funcs.c: 200: if(Hora == 24)
  2860  000EA2  0E18               	movlw	24
  2861  000EA4  183A               	xorwf	_Hora,w,c
  2862  000EA6  A4D8               	btfss	status,2,c
  2863  000EA8  0012               	return	
  2864                           
  2865                           ;funcs.c: 201: Hora = 0;
  2866  000EAA  0E00               	movlw	0
  2867  000EAC  6E3A               	movwf	_Hora,c
  2868  000EAE  0012               	return	
  2869  000EB0                     __end_of_incrementa_min:
  2870                           	opt stack 0
  2871                           pclatu	equ	0xFFB
  2872                           pclath	equ	0xFFA
  2873                           tblptru	equ	0xFF8
  2874                           tblptrh	equ	0xFF7
  2875                           tblptrl	equ	0xFF6
  2876                           tablat	equ	0xFF5
  2877                           prodh	equ	0xFF4
  2878                           prodl	equ	0xFF3
  2879                           intcon	equ	0xFF2
  2880                           intcon2	equ	0xFF1
  2881                           postinc0	equ	0xFEE
  2882                           fsr0h	equ	0xFEA
  2883                           fsr0l	equ	0xFE9
  2884                           wreg	equ	0xFE8
  2885                           indf1	equ	0xFE7
  2886                           postdec1	equ	0xFE5
  2887                           fsr1h	equ	0xFE2
  2888                           fsr1l	equ	0xFE1
  2889                           indf2	equ	0xFDF
  2890                           postinc2	equ	0xFDE
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _envia_teste *****************
  2896 ;; Defined at:
  2897 ;;		line 232 in file "funcs.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;		None
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;		None
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  1    wreg      void 
  2904 ;; Registers used:
  2905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2911 ;;      Params:         0       0       0       0       0       0       0       0       0
  2912 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2914 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2915 ;;Total ram usage:        0 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    2
  2918 ;; This function calls:
  2919 ;;		_enviaDados
  2920 ;;		_envia_dados_da_memoria
  2921 ;;		i2___awdiv
  2922 ;;		i2___awmod
  2923 ;; This function is called by:
  2924 ;;		_serial
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text15
  2929  000878                     __ptext15:
  2930                           	opt stack 0
  2931  000878                     _envia_teste:
  2932                           	opt stack 24
  2933                           
  2934                           ;funcs.c: 234: envia_dados_da_memoria();
  2935                           
  2936                           ;incstack = 0
  2937  000878  EC34  F005         	call	_envia_dados_da_memoria	;wreg free
  2938                           
  2939                           ;funcs.c: 235: enviaDados('-');
  2940  00087C  0E2D               	movlw	45
  2941  00087E  EC74  F007         	call	_enviaDados
  2942                           
  2943                           ;funcs.c: 236: enviaDados(' ');
  2944  000882  0E20               	movlw	32
  2945  000884  EC74  F007         	call	_enviaDados
  2946                           
  2947                           ;funcs.c: 237: enviaDados(((Hora/10) + 48));
  2948  000888  C03A  F001         	movff	_Hora,i2___awdiv@dividend
  2949  00088C  6A02               	clrf	i2___awdiv@dividend+1,c
  2950  00088E  0E00               	movlw	0
  2951  000890  6E04               	movwf	i2___awdiv@divisor+1,c
  2952  000892  0E0A               	movlw	10
  2953  000894  6E03               	movwf	i2___awdiv@divisor,c
  2954  000896  ECC1  F005         	call	i2___awdiv	;wreg free
  2955  00089A  5001               	movf	?i2___awdiv,w,c
  2956  00089C  0F30               	addlw	48
  2957  00089E  EC74  F007         	call	_enviaDados
  2958                           
  2959                           ;funcs.c: 238: enviaDados(((Hora%10) + 48));
  2960  0008A2  C03A  F001         	movff	_Hora,i2___awmod@dividend
  2961  0008A6  6A02               	clrf	i2___awmod@dividend+1,c
  2962  0008A8  0E00               	movlw	0
  2963  0008AA  6E04               	movwf	i2___awmod@divisor+1,c
  2964  0008AC  0E0A               	movlw	10
  2965  0008AE  6E03               	movwf	i2___awmod@divisor,c
  2966  0008B0  EC3C  F006         	call	i2___awmod	;wreg free
  2967  0008B4  5001               	movf	?i2___awmod,w,c
  2968  0008B6  0F30               	addlw	48
  2969  0008B8  EC74  F007         	call	_enviaDados
  2970                           
  2971                           ;funcs.c: 239: enviaDados(':');
  2972  0008BC  0E3A               	movlw	58
  2973  0008BE  EC74  F007         	call	_enviaDados
  2974                           
  2975                           ;funcs.c: 240: enviaDados(((Min/10) + 48));
  2976  0008C2  C03B  F001         	movff	_Min,i2___awdiv@dividend
  2977  0008C6  6A02               	clrf	i2___awdiv@dividend+1,c
  2978  0008C8  0E00               	movlw	0
  2979  0008CA  6E04               	movwf	i2___awdiv@divisor+1,c
  2980  0008CC  0E0A               	movlw	10
  2981  0008CE  6E03               	movwf	i2___awdiv@divisor,c
  2982  0008D0  ECC1  F005         	call	i2___awdiv	;wreg free
  2983  0008D4  5001               	movf	?i2___awdiv,w,c
  2984  0008D6  0F30               	addlw	48
  2985  0008D8  EC74  F007         	call	_enviaDados
  2986                           
  2987                           ;funcs.c: 241: enviaDados(((Min%10) + 48));
  2988  0008DC  C03B  F001         	movff	_Min,i2___awmod@dividend
  2989  0008E0  6A02               	clrf	i2___awmod@dividend+1,c
  2990  0008E2  0E00               	movlw	0
  2991  0008E4  6E04               	movwf	i2___awmod@divisor+1,c
  2992  0008E6  0E0A               	movlw	10
  2993  0008E8  6E03               	movwf	i2___awmod@divisor,c
  2994  0008EA  EC3C  F006         	call	i2___awmod	;wreg free
  2995  0008EE  5001               	movf	?i2___awmod,w,c
  2996  0008F0  0F30               	addlw	48
  2997  0008F2  EC74  F007         	call	_enviaDados
  2998                           
  2999                           ;funcs.c: 242: enviaDados(':');
  3000  0008F6  0E3A               	movlw	58
  3001  0008F8  EC74  F007         	call	_enviaDados
  3002                           
  3003                           ;funcs.c: 243: enviaDados(((seg/10) + 48));
  3004  0008FC  C02E  F001         	movff	_seg,i2___awdiv@dividend
  3005  000900  6A02               	clrf	i2___awdiv@dividend+1,c
  3006  000902  0E00               	movlw	0
  3007  000904  6E04               	movwf	i2___awdiv@divisor+1,c
  3008  000906  0E0A               	movlw	10
  3009  000908  6E03               	movwf	i2___awdiv@divisor,c
  3010  00090A  ECC1  F005         	call	i2___awdiv	;wreg free
  3011  00090E  5001               	movf	?i2___awdiv,w,c
  3012  000910  0F30               	addlw	48
  3013  000912  EC74  F007         	call	_enviaDados
  3014                           
  3015                           ;funcs.c: 244: enviaDados(((seg%10) + 48));
  3016  000916  C02E  F001         	movff	_seg,i2___awmod@dividend
  3017  00091A  6A02               	clrf	i2___awmod@dividend+1,c
  3018  00091C  0E00               	movlw	0
  3019  00091E  6E04               	movwf	i2___awmod@divisor+1,c
  3020  000920  0E0A               	movlw	10
  3021  000922  6E03               	movwf	i2___awmod@divisor,c
  3022  000924  EC3C  F006         	call	i2___awmod	;wreg free
  3023  000928  5001               	movf	?i2___awmod,w,c
  3024  00092A  0F30               	addlw	48
  3025  00092C  EC74  F007         	call	_enviaDados
  3026                           
  3027                           ;funcs.c: 245: enviaDados('\n');
  3028  000930  0E0A               	movlw	10
  3029  000932  EC74  F007         	call	_enviaDados
  3030  000936  0012               	return		;funcret
  3031  000938                     __end_of_envia_teste:
  3032                           	opt stack 0
  3033                           pclatu	equ	0xFFB
  3034                           pclath	equ	0xFFA
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           intcon2	equ	0xFF1
  3043                           postinc0	equ	0xFEE
  3044                           fsr0h	equ	0xFEA
  3045                           fsr0l	equ	0xFE9
  3046                           wreg	equ	0xFE8
  3047                           indf1	equ	0xFE7
  3048                           postdec1	equ	0xFE5
  3049                           fsr1h	equ	0xFE2
  3050                           fsr1l	equ	0xFE1
  3051                           indf2	equ	0xFDF
  3052                           postinc2	equ	0xFDE
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _envia_dados_da_memoria *****************
  3058 ;; Defined at:
  3059 ;;		line 335 in file "funcs.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  indice          1    1[COMRAM] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0
  3074 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3076 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3077 ;;Total ram usage:        1 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    1
  3080 ;; This function calls:
  3081 ;;		_enviaDados
  3082 ;; This function is called by:
  3083 ;;		_envia_teste
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text16
  3088  000A68                     __ptext16:
  3089                           	opt stack 0
  3090  000A68                     _envia_dados_da_memoria:
  3091                           	opt stack 24
  3092                           
  3093                           ;funcs.c: 337: char indice;
  3094                           ;funcs.c: 338: for(indice = 0; indice < 4; indice++)
  3095                           
  3096                           ;incstack = 0
  3097  000A68  0E00               	movlw	0
  3098  000A6A  6E02               	movwf	envia_dados_da_memoria@indice,c
  3099  000A6C                     i2l1638:
  3100  000A6C  0E03               	movlw	3
  3101  000A6E  6402               	cpfsgt	envia_dados_da_memoria@indice,c
  3102  000A70  D001               	goto	i2l314
  3103  000A72  0012               	return	
  3104  000A74                     i2l314:
  3105                           
  3106                           ;funcs.c: 339: {
  3107                           ;funcs.c: 340: enviaDados(remedio[indice].d_hora + 48);
  3108  000A74  5002               	movf	envia_dados_da_memoria@indice,w,c
  3109  000A76  0D05               	mullw	5
  3110  000A78  0E60               	movlw	low _remedio
  3111  000A7A  24F3               	addwf	prodl,w,c
  3112  000A7C  6ED9               	movwf	fsr2l,c
  3113  000A7E  0E00               	movlw	high _remedio
  3114  000A80  20F4               	addwfc	prodh,w,c
  3115  000A82  6EDA               	movwf	fsr2h,c
  3116  000A84  50DF               	movf	indf2,w,c
  3117  000A86  0F30               	addlw	48
  3118  000A88  EC74  F007         	call	_enviaDados
  3119                           
  3120                           ;funcs.c: 341: enviaDados(remedio[indice].u_hora + 48);
  3121  000A8C  5002               	movf	envia_dados_da_memoria@indice,w,c
  3122  000A8E  0D05               	mullw	5
  3123  000A90  0E01               	movlw	1
  3124  000A92  26F3               	addwf	prodl,f,c
  3125  000A94  0E00               	movlw	0
  3126  000A96  22F4               	addwfc	prodh,f,c
  3127  000A98  0E60               	movlw	low _remedio
  3128  000A9A  24F3               	addwf	prodl,w,c
  3129  000A9C  6ED9               	movwf	fsr2l,c
  3130  000A9E  0E00               	movlw	high _remedio
  3131  000AA0  20F4               	addwfc	prodh,w,c
  3132  000AA2  6EDA               	movwf	fsr2h,c
  3133  000AA4  50DF               	movf	indf2,w,c
  3134  000AA6  0F30               	addlw	48
  3135  000AA8  EC74  F007         	call	_enviaDados
  3136                           
  3137                           ;funcs.c: 342: enviaDados(':');
  3138  000AAC  0E3A               	movlw	58
  3139  000AAE  EC74  F007         	call	_enviaDados
  3140                           
  3141                           ;funcs.c: 343: enviaDados(remedio[indice].d_minuto + 48);
  3142  000AB2  5002               	movf	envia_dados_da_memoria@indice,w,c
  3143  000AB4  0D05               	mullw	5
  3144  000AB6  0E02               	movlw	2
  3145  000AB8  26F3               	addwf	prodl,f,c
  3146  000ABA  0E00               	movlw	0
  3147  000ABC  22F4               	addwfc	prodh,f,c
  3148  000ABE  0E60               	movlw	low _remedio
  3149  000AC0  24F3               	addwf	prodl,w,c
  3150  000AC2  6ED9               	movwf	fsr2l,c
  3151  000AC4  0E00               	movlw	high _remedio
  3152  000AC6  20F4               	addwfc	prodh,w,c
  3153  000AC8  6EDA               	movwf	fsr2h,c
  3154  000ACA  50DF               	movf	indf2,w,c
  3155  000ACC  0F30               	addlw	48
  3156  000ACE  EC74  F007         	call	_enviaDados
  3157                           
  3158                           ;funcs.c: 344: enviaDados(remedio[indice].u_minuto + 48);
  3159  000AD2  5002               	movf	envia_dados_da_memoria@indice,w,c
  3160  000AD4  0D05               	mullw	5
  3161  000AD6  0E03               	movlw	3
  3162  000AD8  26F3               	addwf	prodl,f,c
  3163  000ADA  0E00               	movlw	0
  3164  000ADC  22F4               	addwfc	prodh,f,c
  3165  000ADE  0E60               	movlw	low _remedio
  3166  000AE0  24F3               	addwf	prodl,w,c
  3167  000AE2  6ED9               	movwf	fsr2l,c
  3168  000AE4  0E00               	movlw	high _remedio
  3169  000AE6  20F4               	addwfc	prodh,w,c
  3170  000AE8  6EDA               	movwf	fsr2h,c
  3171  000AEA  50DF               	movf	indf2,w,c
  3172  000AEC  0F30               	addlw	48
  3173  000AEE  EC74  F007         	call	_enviaDados
  3174                           
  3175                           ;funcs.c: 345: enviaDados('\t');
  3176  000AF2  0E09               	movlw	9
  3177  000AF4  EC74  F007         	call	_enviaDados
  3178  000AF8  2A02               	incf	envia_dados_da_memoria@indice,f,c
  3179  000AFA  D7B8               	goto	i2l1638
  3180  000AFC                     __end_of_envia_dados_da_memoria:
  3181                           	opt stack 0
  3182                           pclatu	equ	0xFFB
  3183                           pclath	equ	0xFFA
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           fsr0h	equ	0xFEA
  3194                           fsr0l	equ	0xFE9
  3195                           wreg	equ	0xFE8
  3196                           indf1	equ	0xFE7
  3197                           postdec1	equ	0xFE5
  3198                           fsr1h	equ	0xFE2
  3199                           fsr1l	equ	0xFE1
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _enviaDados *****************
  3207 ;; Defined at:
  3208 ;;		line 140 in file "funcs.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  dados           1    wreg     unsigned char 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  dados           1    0[COMRAM] unsigned char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3222 ;;      Params:         0       0       0       0       0       0       0       0       0
  3223 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3225 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3226 ;;Total ram usage:        1 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; This function calls:
  3229 ;;		Nothing
  3230 ;; This function is called by:
  3231 ;;		_envia_teste
  3232 ;;		_envia_dados_da_memoria
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text17
  3237  000EE8                     __ptext17:
  3238                           	opt stack 0
  3239  000EE8                     _enviaDados:
  3240                           	opt stack 24
  3241                           
  3242                           ;incstack = 0
  3243                           ;enviaDados@dados stored from wreg
  3244  000EE8  6E01               	movwf	enviaDados@dados,c
  3245  000EEA                     
  3246                           ;funcs.c: 142: while(!TXIF);
  3247  000EEA  A89E               	btfss	3998,4,c	;volatile
  3248  000EEC  D7FE               	goto	i2l1492
  3249                           
  3250                           ;funcs.c: 143: TXREG = dados;
  3251  000EEE  C001  FFAD         	movff	enviaDados@dados,4013	;volatile
  3252  000EF2  0012               	return		;funcret
  3253  000EF4                     __end_of_enviaDados:
  3254                           	opt stack 0
  3255                           pclatu	equ	0xFFB
  3256                           pclath	equ	0xFFA
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           intcon2	equ	0xFF1
  3265                           postinc0	equ	0xFEE
  3266                           fsr0h	equ	0xFEA
  3267                           fsr0l	equ	0xFE9
  3268                           wreg	equ	0xFE8
  3269                           indf1	equ	0xFE7
  3270                           postdec1	equ	0xFE5
  3271                           fsr1h	equ	0xFE2
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function _comunica *****************
  3280 ;; Defined at:
  3281 ;;		line 248 in file "funcs.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;		None
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;		None
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3295 ;;      Params:         0       0       0       0       0       0       0       0       0
  3296 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3297 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3298 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3299 ;;Total ram usage:        1 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:    2
  3302 ;; This function calls:
  3303 ;;		_atualiza_relogio_blue
  3304 ;;		i2___awdiv
  3305 ;;		i2___awmod
  3306 ;;		i2_grava_eeprom
  3307 ;; This function is called by:
  3308 ;;		_serial
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text18
  3313  000012                     __ptext18:
  3314                           	opt stack 0
  3315  000012                     _comunica:
  3316                           	opt stack 24
  3317                           
  3318                           ;funcs.c: 250: if(string[0] == 'R')
  3319                           
  3320                           ;incstack = 0
  3321  000012  0E52               	movlw	82
  3322  000014  1824               	xorwf	_string,w,c
  3323  000016  A4D8               	btfss	status,2,c
  3324  000018  D003               	goto	i2l294
  3325                           
  3326                           ;funcs.c: 251: {
  3327                           ;funcs.c: 252: atualiza_relogio_blue();
  3328  00001A  ECE9  F004         	call	_atualiza_relogio_blue	;wreg free
  3329                           
  3330                           ;funcs.c: 253: return;
  3331  00001E  0012               	return	
  3332  000020                     i2l294:
  3333                           
  3334                           ;funcs.c: 254: }
  3335                           ;funcs.c: 257: i = string[0] - 48;
  3336  000020  5024               	movf	_string,w,c
  3337  000022  0FD0               	addlw	208
  3338  000024  6E35               	movwf	_i,c
  3339                           
  3340                           ;funcs.c: 260: remedio[i].d_hora = (string[1] - 48);
  3341  000026  5035               	movf	_i,w,c
  3342  000028  0D05               	mullw	5
  3343  00002A  0E60               	movlw	low _remedio
  3344  00002C  24F3               	addwf	prodl,w,c
  3345  00002E  6ED9               	movwf	fsr2l,c
  3346  000030  0E00               	movlw	high _remedio
  3347  000032  20F4               	addwfc	prodh,w,c
  3348  000034  6EDA               	movwf	fsr2h,c
  3349  000036  5025               	movf	_string+1,w,c
  3350  000038  0FD0               	addlw	208
  3351  00003A  6EDF               	movwf	indf2,c
  3352                           
  3353                           ;funcs.c: 261: remedio[i].u_hora = (string[2] - 48);
  3354  00003C  5035               	movf	_i,w,c
  3355  00003E  0D05               	mullw	5
  3356  000040  0E01               	movlw	1
  3357  000042  26F3               	addwf	prodl,f,c
  3358  000044  0E00               	movlw	0
  3359  000046  22F4               	addwfc	prodh,f,c
  3360  000048  0E60               	movlw	low _remedio
  3361  00004A  24F3               	addwf	prodl,w,c
  3362  00004C  6ED9               	movwf	fsr2l,c
  3363  00004E  0E00               	movlw	high _remedio
  3364  000050  20F4               	addwfc	prodh,w,c
  3365  000052  6EDA               	movwf	fsr2h,c
  3366  000054  5026               	movf	_string+2,w,c
  3367  000056  0FD0               	addlw	208
  3368  000058  6EDF               	movwf	indf2,c
  3369                           
  3370                           ;funcs.c: 262: remedio[i].passo = ((remedio[i].d_hora * 10) + remedio[i].u_hora);
  3371  00005A  5035               	movf	_i,w,c
  3372  00005C  0D05               	mullw	5
  3373  00005E  0E04               	movlw	4
  3374  000060  26F3               	addwf	prodl,f,c
  3375  000062  0E00               	movlw	0
  3376  000064  22F4               	addwfc	prodh,f,c
  3377  000066  0E60               	movlw	low _remedio
  3378  000068  24F3               	addwf	prodl,w,c
  3379  00006A  6ED9               	movwf	fsr2l,c
  3380  00006C  0E00               	movlw	high _remedio
  3381  00006E  20F4               	addwfc	prodh,w,c
  3382  000070  6EDA               	movwf	fsr2h,c
  3383  000072  5035               	movf	_i,w,c
  3384  000074  0D05               	mullw	5
  3385  000076  0E01               	movlw	1
  3386  000078  26F3               	addwf	prodl,f,c
  3387  00007A  0E00               	movlw	0
  3388  00007C  22F4               	addwfc	prodh,f,c
  3389  00007E  0E60               	movlw	low _remedio
  3390  000080  24F3               	addwf	prodl,w,c
  3391  000082  6EE1               	movwf	fsr1l,c
  3392  000084  0E00               	movlw	high _remedio
  3393  000086  20F4               	addwfc	prodh,w,c
  3394  000088  6EE2               	movwf	fsr1h,c
  3395  00008A  50E7               	movf	indf1,w,c
  3396  00008C  6E10               	movwf	??_comunica& (0+255),c
  3397  00008E  5035               	movf	_i,w,c
  3398  000090  0D05               	mullw	5
  3399  000092  0E60               	movlw	low _remedio
  3400  000094  24F3               	addwf	prodl,w,c
  3401  000096  6EE1               	movwf	fsr1l,c
  3402  000098  0E00               	movlw	high _remedio
  3403  00009A  20F4               	addwfc	prodh,w,c
  3404  00009C  6EE2               	movwf	fsr1h,c
  3405  00009E  50E7               	movf	indf1,w,c
  3406  0000A0  0D0A               	mullw	10
  3407  0000A2  50F3               	movf	prodl,w,c
  3408  0000A4  2410               	addwf	??_comunica,w,c
  3409  0000A6  6EDF               	movwf	indf2,c
  3410                           
  3411                           ;funcs.c: 263: grava_eeprom(add_passo + i, remedio[i].passo);
  3412  0000A8  5036               	movf	_add_passo,w,c
  3413  0000AA  2435               	addwf	_i,w,c
  3414  0000AC  6E09               	movwf	i2grava_eeprom@address,c
  3415  0000AE  6A0A               	clrf	i2grava_eeprom@address+1,c
  3416  0000B0  360A               	rlcf	i2grava_eeprom@address+1,f,c
  3417  0000B2  5035               	movf	_i,w,c
  3418  0000B4  0D05               	mullw	5
  3419  0000B6  0E04               	movlw	4
  3420  0000B8  26F3               	addwf	prodl,f,c
  3421  0000BA  0E00               	movlw	0
  3422  0000BC  22F4               	addwfc	prodh,f,c
  3423  0000BE  0E60               	movlw	low _remedio
  3424  0000C0  24F3               	addwf	prodl,w,c
  3425  0000C2  6ED9               	movwf	fsr2l,c
  3426  0000C4  0E00               	movlw	high _remedio
  3427  0000C6  20F4               	addwfc	prodh,w,c
  3428  0000C8  6EDA               	movwf	fsr2h,c
  3429  0000CA  50DF               	movf	indf2,w,c
  3430  0000CC  6E0B               	movwf	i2grava_eeprom@data,c
  3431  0000CE  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3432                           
  3433                           ;funcs.c: 264: dado = remedio[i].passo + Hora;
  3434  0000D2  5035               	movf	_i,w,c
  3435  0000D4  0D05               	mullw	5
  3436  0000D6  0E04               	movlw	4
  3437  0000D8  26F3               	addwf	prodl,f,c
  3438  0000DA  0E00               	movlw	0
  3439  0000DC  22F4               	addwfc	prodh,f,c
  3440  0000DE  0E60               	movlw	low _remedio
  3441  0000E0  24F3               	addwf	prodl,w,c
  3442  0000E2  6ED9               	movwf	fsr2l,c
  3443  0000E4  0E00               	movlw	high _remedio
  3444  0000E6  20F4               	addwfc	prodh,w,c
  3445  0000E8  6EDA               	movwf	fsr2h,c
  3446  0000EA  50DF               	movf	indf2,w,c
  3447  0000EC  243A               	addwf	_Hora,w,c
  3448  0000EE  6E31               	movwf	_dado,c
  3449                           
  3450                           ;funcs.c: 265: if( dado > 23)
  3451  0000F0  0E17               	movlw	23
  3452  0000F2  6431               	cpfsgt	_dado,c
  3453  0000F4  D003               	goto	i2l296
  3454                           
  3455                           ;funcs.c: 266: {
  3456                           ;funcs.c: 267: dado = dado - 24;
  3457  0000F6  5031               	movf	_dado,w,c
  3458  0000F8  0FE8               	addlw	232
  3459  0000FA  6E31               	movwf	_dado,c
  3460  0000FC                     i2l296:
  3461                           
  3462                           ;funcs.c: 268: }
  3463                           ;funcs.c: 269: grava_eeprom((add_d_hora + i), dado/10);
  3464  0000FC  502D               	movf	_add_d_hora,w,c
  3465  0000FE  2435               	addwf	_i,w,c
  3466  000100  6E09               	movwf	i2grava_eeprom@address,c
  3467  000102  6A0A               	clrf	i2grava_eeprom@address+1,c
  3468  000104  360A               	rlcf	i2grava_eeprom@address+1,f,c
  3469  000106  C031  F001         	movff	_dado,i2___awdiv@dividend
  3470  00010A  6A02               	clrf	i2___awdiv@dividend+1,c
  3471  00010C  0E00               	movlw	0
  3472  00010E  6E04               	movwf	i2___awdiv@divisor+1,c
  3473  000110  0E0A               	movlw	10
  3474  000112  6E03               	movwf	i2___awdiv@divisor,c
  3475  000114  ECC1  F005         	call	i2___awdiv	;wreg free
  3476  000118  5001               	movf	?i2___awdiv,w,c
  3477  00011A  6E0B               	movwf	i2grava_eeprom@data,c
  3478  00011C  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3479                           
  3480                           ;funcs.c: 270: grava_eeprom((add_u_hora + i), dado%10);
  3481  000120  5039               	movf	_add_u_hora,w,c
  3482  000122  2435               	addwf	_i,w,c
  3483  000124  6E09               	movwf	i2grava_eeprom@address,c
  3484  000126  6A0A               	clrf	i2grava_eeprom@address+1,c
  3485  000128  360A               	rlcf	i2grava_eeprom@address+1,f,c
  3486  00012A  C031  F001         	movff	_dado,i2___awmod@dividend
  3487  00012E  6A02               	clrf	i2___awmod@dividend+1,c
  3488  000130  0E00               	movlw	0
  3489  000132  6E04               	movwf	i2___awmod@divisor+1,c
  3490  000134  0E0A               	movlw	10
  3491  000136  6E03               	movwf	i2___awmod@divisor,c
  3492  000138  EC3C  F006         	call	i2___awmod	;wreg free
  3493  00013C  5001               	movf	?i2___awmod,w,c
  3494  00013E  6E0B               	movwf	i2grava_eeprom@data,c
  3495  000140  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3496                           
  3497                           ;funcs.c: 271: remedio[i].d_hora = dado/10;
  3498  000144  5035               	movf	_i,w,c
  3499  000146  0D05               	mullw	5
  3500  000148  0E60               	movlw	low _remedio
  3501  00014A  24F3               	addwf	prodl,w,c
  3502  00014C  6ED9               	movwf	fsr2l,c
  3503  00014E  0E00               	movlw	high _remedio
  3504  000150  20F4               	addwfc	prodh,w,c
  3505  000152  6EDA               	movwf	fsr2h,c
  3506  000154  C031  F001         	movff	_dado,i2___awdiv@dividend
  3507  000158  6A02               	clrf	i2___awdiv@dividend+1,c
  3508  00015A  0E00               	movlw	0
  3509  00015C  6E04               	movwf	i2___awdiv@divisor+1,c
  3510  00015E  0E0A               	movlw	10
  3511  000160  6E03               	movwf	i2___awdiv@divisor,c
  3512  000162  ECC1  F005         	call	i2___awdiv	;wreg free
  3513  000166  5001               	movf	?i2___awdiv,w,c
  3514  000168  6EDF               	movwf	indf2,c
  3515                           
  3516                           ;funcs.c: 272: remedio[i].u_hora = dado%10;
  3517  00016A  5035               	movf	_i,w,c
  3518  00016C  0D05               	mullw	5
  3519  00016E  0E01               	movlw	1
  3520  000170  26F3               	addwf	prodl,f,c
  3521  000172  0E00               	movlw	0
  3522  000174  22F4               	addwfc	prodh,f,c
  3523  000176  0E60               	movlw	low _remedio
  3524  000178  24F3               	addwf	prodl,w,c
  3525  00017A  6ED9               	movwf	fsr2l,c
  3526  00017C  0E00               	movlw	high _remedio
  3527  00017E  20F4               	addwfc	prodh,w,c
  3528  000180  6EDA               	movwf	fsr2h,c
  3529  000182  C031  F001         	movff	_dado,i2___awmod@dividend
  3530  000186  6A02               	clrf	i2___awmod@dividend+1,c
  3531  000188  0E00               	movlw	0
  3532  00018A  6E04               	movwf	i2___awmod@divisor+1,c
  3533  00018C  0E0A               	movlw	10
  3534  00018E  6E03               	movwf	i2___awmod@divisor,c
  3535  000190  EC3C  F006         	call	i2___awmod	;wreg free
  3536  000194  5001               	movf	?i2___awmod,w,c
  3537  000196  6EDF               	movwf	indf2,c
  3538                           
  3539                           ;funcs.c: 273: grava_eeprom((add_d_minuto + i), Min/10);
  3540  000198  5038               	movf	_add_d_minuto,w,c
  3541  00019A  2435               	addwf	_i,w,c
  3542  00019C  6E09               	movwf	i2grava_eeprom@address,c
  3543  00019E  6A0A               	clrf	i2grava_eeprom@address+1,c
  3544  0001A0  360A               	rlcf	i2grava_eeprom@address+1,f,c
  3545  0001A2  C03B  F001         	movff	_Min,i2___awdiv@dividend
  3546  0001A6  6A02               	clrf	i2___awdiv@dividend+1,c
  3547  0001A8  0E00               	movlw	0
  3548  0001AA  6E04               	movwf	i2___awdiv@divisor+1,c
  3549  0001AC  0E0A               	movlw	10
  3550  0001AE  6E03               	movwf	i2___awdiv@divisor,c
  3551  0001B0  ECC1  F005         	call	i2___awdiv	;wreg free
  3552  0001B4  5001               	movf	?i2___awdiv,w,c
  3553  0001B6  6E0B               	movwf	i2grava_eeprom@data,c
  3554  0001B8  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3555                           
  3556                           ;funcs.c: 274: grava_eeprom((add_u_minuto + i), Min%10);
  3557  0001BC  5037               	movf	_add_u_minuto,w,c
  3558  0001BE  2435               	addwf	_i,w,c
  3559  0001C0  6E09               	movwf	i2grava_eeprom@address,c
  3560  0001C2  6A0A               	clrf	i2grava_eeprom@address+1,c
  3561  0001C4  360A               	rlcf	i2grava_eeprom@address+1,f,c
  3562  0001C6  C03B  F001         	movff	_Min,i2___awmod@dividend
  3563  0001CA  6A02               	clrf	i2___awmod@dividend+1,c
  3564  0001CC  0E00               	movlw	0
  3565  0001CE  6E04               	movwf	i2___awmod@divisor+1,c
  3566  0001D0  0E0A               	movlw	10
  3567  0001D2  6E03               	movwf	i2___awmod@divisor,c
  3568  0001D4  EC3C  F006         	call	i2___awmod	;wreg free
  3569  0001D8  5001               	movf	?i2___awmod,w,c
  3570  0001DA  6E0B               	movwf	i2grava_eeprom@data,c
  3571  0001DC  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3572                           
  3573                           ;funcs.c: 275: remedio[i].d_minuto = Min/10;
  3574  0001E0  5035               	movf	_i,w,c
  3575  0001E2  0D05               	mullw	5
  3576  0001E4  0E02               	movlw	2
  3577  0001E6  26F3               	addwf	prodl,f,c
  3578  0001E8  0E00               	movlw	0
  3579  0001EA  22F4               	addwfc	prodh,f,c
  3580  0001EC  0E60               	movlw	low _remedio
  3581  0001EE  24F3               	addwf	prodl,w,c
  3582  0001F0  6ED9               	movwf	fsr2l,c
  3583  0001F2  0E00               	movlw	high _remedio
  3584  0001F4  20F4               	addwfc	prodh,w,c
  3585  0001F6  6EDA               	movwf	fsr2h,c
  3586  0001F8  C03B  F001         	movff	_Min,i2___awdiv@dividend
  3587  0001FC  6A02               	clrf	i2___awdiv@dividend+1,c
  3588  0001FE  0E00               	movlw	0
  3589  000200  6E04               	movwf	i2___awdiv@divisor+1,c
  3590  000202  0E0A               	movlw	10
  3591  000204  6E03               	movwf	i2___awdiv@divisor,c
  3592  000206  ECC1  F005         	call	i2___awdiv	;wreg free
  3593  00020A  5001               	movf	?i2___awdiv,w,c
  3594  00020C  6EDF               	movwf	indf2,c
  3595                           
  3596                           ;funcs.c: 276: remedio[i].u_minuto = Min%10;
  3597  00020E  5035               	movf	_i,w,c
  3598  000210  0D05               	mullw	5
  3599  000212  0E03               	movlw	3
  3600  000214  26F3               	addwf	prodl,f,c
  3601  000216  0E00               	movlw	0
  3602  000218  22F4               	addwfc	prodh,f,c
  3603  00021A  0E60               	movlw	low _remedio
  3604  00021C  24F3               	addwf	prodl,w,c
  3605  00021E  6ED9               	movwf	fsr2l,c
  3606  000220  0E00               	movlw	high _remedio
  3607  000222  20F4               	addwfc	prodh,w,c
  3608  000224  6EDA               	movwf	fsr2h,c
  3609  000226  C03B  F001         	movff	_Min,i2___awmod@dividend
  3610  00022A  6A02               	clrf	i2___awmod@dividend+1,c
  3611  00022C  0E00               	movlw	0
  3612  00022E  6E04               	movwf	i2___awmod@divisor+1,c
  3613  000230  0E0A               	movlw	10
  3614  000232  6E03               	movwf	i2___awmod@divisor,c
  3615  000234  EC3C  F006         	call	i2___awmod	;wreg free
  3616  000238  5001               	movf	?i2___awmod,w,c
  3617  00023A  6EDF               	movwf	indf2,c
  3618                           
  3619                           ;funcs.c: 277: pendencia_remedio[i] = 1;
  3620  00023C  5035               	movf	_i,w,c
  3621  00023E  0D01               	mullw	1
  3622  000240  0E29               	movlw	low _pendencia_remedio
  3623  000242  24F3               	addwf	prodl,w,c
  3624  000244  6ED9               	movwf	fsr2l,c
  3625  000246  0E00               	movlw	high _pendencia_remedio
  3626  000248  20F4               	addwfc	prodh,w,c
  3627  00024A  6EDA               	movwf	fsr2h,c
  3628  00024C  0E01               	movlw	1
  3629  00024E  6EDF               	movwf	indf2,c
  3630                           
  3631                           ;funcs.c: 278: libera = 1;
  3632  000250  0E01               	movlw	1
  3633  000252  6E33               	movwf	_libera,c
  3634  000254  0012               	return		;funcret
  3635  000256                     __end_of_comunica:
  3636                           	opt stack 0
  3637                           pclatu	equ	0xFFB
  3638                           pclath	equ	0xFFA
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           intcon	equ	0xFF2
  3646                           intcon2	equ	0xFF1
  3647                           postinc0	equ	0xFEE
  3648                           fsr0h	equ	0xFEA
  3649                           fsr0l	equ	0xFE9
  3650                           wreg	equ	0xFE8
  3651                           indf1	equ	0xFE7
  3652                           postdec1	equ	0xFE5
  3653                           fsr1h	equ	0xFE2
  3654                           fsr1l	equ	0xFE1
  3655                           indf2	equ	0xFDF
  3656                           postinc2	equ	0xFDE
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _atualiza_relogio_blue *****************
  3662 ;; Defined at:
  3663 ;;		line 211 in file "funcs.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  i               1   14[COMRAM] unsigned char 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3677 ;;      Params:         0       0       0       0       0       0       0       0       0
  3678 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3679 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3680 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3681 ;;Total ram usage:        3 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    1
  3684 ;; This function calls:
  3685 ;;		i2_grava_eeprom
  3686 ;;		i2_le_eeprom
  3687 ;; This function is called by:
  3688 ;;		_comunica
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text19
  3693  0009D2                     __ptext19:
  3694                           	opt stack 0
  3695  0009D2                     _atualiza_relogio_blue:
  3696                           	opt stack 24
  3697                           
  3698                           ;funcs.c: 213: char i;
  3699                           ;funcs.c: 214: for(i = 1; i < 5; i++)
  3700                           
  3701                           ;incstack = 0
  3702  0009D2  0E01               	movlw	1
  3703  0009D4  6E0F               	movwf	atualiza_relogio_blue@i,c
  3704  0009D6                     i2l1620:
  3705  0009D6  0E04               	movlw	4
  3706  0009D8  640F               	cpfsgt	atualiza_relogio_blue@i,c
  3707  0009DA  D001               	goto	i2l283
  3708  0009DC  D01C               	goto	i2u80_40
  3709  0009DE                     i2l283:
  3710                           
  3711                           ;funcs.c: 215: {
  3712                           ;funcs.c: 216: grava_eeprom(add_d_hora + 20 + i - 1, (string[i] - 48));
  3713  0009DE  500F               	movf	atualiza_relogio_blue@i,w,c
  3714  0009E0  C02D  F00D         	movff	_add_d_hora,??_atualiza_relogio_blue
  3715  0009E4  6A0E               	clrf	(??_atualiza_relogio_blue+1)& (0+255),c
  3716  0009E6  260D               	addwf	??_atualiza_relogio_blue,f,c
  3717  0009E8  0E00               	movlw	0
  3718  0009EA  220E               	addwfc	??_atualiza_relogio_blue+1,f,c
  3719  0009EC  0E13               	movlw	19
  3720  0009EE  240D               	addwf	??_atualiza_relogio_blue,w,c
  3721  0009F0  6E09               	movwf	i2grava_eeprom@address,c
  3722  0009F2  0E00               	movlw	0
  3723  0009F4  200E               	addwfc	??_atualiza_relogio_blue+1,w,c
  3724  0009F6  6E0A               	movwf	i2grava_eeprom@address+1,c
  3725  0009F8  500F               	movf	atualiza_relogio_blue@i,w,c
  3726  0009FA  0D01               	mullw	1
  3727  0009FC  0E24               	movlw	low _string
  3728  0009FE  24F3               	addwf	prodl,w,c
  3729  000A00  6ED9               	movwf	fsr2l,c
  3730  000A02  0E00               	movlw	high _string
  3731  000A04  20F4               	addwfc	prodh,w,c
  3732  000A06  6EDA               	movwf	fsr2h,c
  3733  000A08  50DF               	movf	indf2,w,c
  3734  000A0A  0FD0               	addlw	208
  3735  000A0C  6E0B               	movwf	i2grava_eeprom@data,c
  3736  000A0E  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3737  000A12  2A0F               	incf	atualiza_relogio_blue@i,f,c
  3738  000A14  D7E0               	goto	i2l1620
  3739  000A16                     i2u80_40:
  3740                           
  3741                           ;funcs.c: 217: }
  3742                           ;funcs.c: 218: Hora = le_eeprom(add_d_hora + 20) * 10;
  3743  000A16  0E14               	movlw	20
  3744  000A18  242D               	addwf	_add_d_hora,w,c
  3745  000A1A  6E01               	movwf	i2le_eeprom@address,c
  3746  000A1C  6A02               	clrf	i2le_eeprom@address+1,c
  3747  000A1E  0E00               	movlw	0
  3748  000A20  2202               	addwfc	i2le_eeprom@address+1,f,c
  3749  000A22  EC6D  F007         	call	i2_le_eeprom	;wreg free
  3750  000A26  0D0A               	mullw	10
  3751  000A28  CFF3 F03A          	movff	prodl,_Hora
  3752                           
  3753                           ;funcs.c: 219: Hora += le_eeprom(add_d_hora + 21);
  3754  000A2C  0E15               	movlw	21
  3755  000A2E  242D               	addwf	_add_d_hora,w,c
  3756  000A30  6E01               	movwf	i2le_eeprom@address,c
  3757  000A32  6A02               	clrf	i2le_eeprom@address+1,c
  3758  000A34  0E00               	movlw	0
  3759  000A36  2202               	addwfc	i2le_eeprom@address+1,f,c
  3760  000A38  EC6D  F007         	call	i2_le_eeprom	;wreg free
  3761  000A3C  263A               	addwf	_Hora,f,c
  3762                           
  3763                           ;funcs.c: 220: Min = le_eeprom(add_d_hora + 22) * 10;
  3764  000A3E  0E16               	movlw	22
  3765  000A40  242D               	addwf	_add_d_hora,w,c
  3766  000A42  6E01               	movwf	i2le_eeprom@address,c
  3767  000A44  6A02               	clrf	i2le_eeprom@address+1,c
  3768  000A46  0E00               	movlw	0
  3769  000A48  2202               	addwfc	i2le_eeprom@address+1,f,c
  3770  000A4A  EC6D  F007         	call	i2_le_eeprom	;wreg free
  3771  000A4E  0D0A               	mullw	10
  3772  000A50  CFF3 F03B          	movff	prodl,_Min
  3773                           
  3774                           ;funcs.c: 221: Min += le_eeprom(add_d_hora + 23);
  3775  000A54  0E17               	movlw	23
  3776  000A56  242D               	addwf	_add_d_hora,w,c
  3777  000A58  6E01               	movwf	i2le_eeprom@address,c
  3778  000A5A  6A02               	clrf	i2le_eeprom@address+1,c
  3779  000A5C  0E00               	movlw	0
  3780  000A5E  2202               	addwfc	i2le_eeprom@address+1,f,c
  3781  000A60  EC6D  F007         	call	i2_le_eeprom	;wreg free
  3782  000A64  263B               	addwf	_Min,f,c
  3783  000A66  0012               	return		;funcret
  3784  000A68                     __end_of_atualiza_relogio_blue:
  3785                           	opt stack 0
  3786                           pclatu	equ	0xFFB
  3787                           pclath	equ	0xFFA
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon	equ	0xFF2
  3795                           intcon2	equ	0xFF1
  3796                           postinc0	equ	0xFEE
  3797                           fsr0h	equ	0xFEA
  3798                           fsr0l	equ	0xFE9
  3799                           wreg	equ	0xFE8
  3800                           indf1	equ	0xFE7
  3801                           postdec1	equ	0xFE5
  3802                           fsr1h	equ	0xFE2
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function i2_le_eeprom *****************
  3811 ;; Defined at:
  3812 ;;		line 130 in file "funcs.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  address         2    0[COMRAM] int 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      unsigned char 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3826 ;;      Params:         2       0       0       0       0       0       0       0       0
  3827 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3829 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3830 ;;Total ram usage:        2 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_atualiza_relogio_blue
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text20
  3840  000EDA                     __ptext20:
  3841                           	opt stack 0
  3842  000EDA                     i2_le_eeprom:
  3843                           	opt stack 24
  3844                           
  3845                           ;funcs.c: 132: EEADR = address;
  3846                           
  3847                           ;incstack = 0
  3848  000EDA  C001  FFA9         	movff	i2le_eeprom@address,4009	;volatile
  3849                           
  3850                           ;funcs.c: 133: EECON1bits.WREN = 0;
  3851  000EDE  94A6               	bcf	4006,2,c	;volsfr
  3852                           
  3853                           ;funcs.c: 134: EECON1bits.EEPGD = 0;
  3854  000EE0  9EA6               	bcf	4006,7,c	;volsfr
  3855                           
  3856                           ;funcs.c: 135: EECON1bits.RD = 1;
  3857  000EE2  80A6               	bsf	4006,0,c	;volsfr
  3858                           
  3859                           ;funcs.c: 136: return(EEDATA);
  3860  000EE4  50A8               	movf	4008,w,c	;volatile
  3861  000EE6  0012               	return	
  3862  000EE8                     __end_ofi2_le_eeprom:
  3863                           	opt stack 0
  3864                           pclatu	equ	0xFFB
  3865                           pclath	equ	0xFFA
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           prodh	equ	0xFF4
  3871                           prodl	equ	0xFF3
  3872                           intcon	equ	0xFF2
  3873                           intcon2	equ	0xFF1
  3874                           postinc0	equ	0xFEE
  3875                           fsr0h	equ	0xFEA
  3876                           fsr0l	equ	0xFE9
  3877                           wreg	equ	0xFE8
  3878                           indf1	equ	0xFE7
  3879                           postdec1	equ	0xFE5
  3880                           fsr1h	equ	0xFE2
  3881                           fsr1l	equ	0xFE1
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _cadastra_relogio *****************
  3889 ;; Defined at:
  3890 ;;		line 224 in file "funcs.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    1
  3911 ;; This function calls:
  3912 ;;		i2___awdiv
  3913 ;;		i2___awmod
  3914 ;;		i2_grava_eeprom
  3915 ;; This function is called by:
  3916 ;;		_serial
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text21
  3921  000938                     __ptext21:
  3922                           	opt stack 0
  3923  000938                     _cadastra_relogio:
  3924                           	opt stack 25
  3925                           
  3926                           ;funcs.c: 226: grava_eeprom(add_d_hora + 20, Hora/10);
  3927                           
  3928                           ;incstack = 0
  3929  000938  0E14               	movlw	20
  3930  00093A  242D               	addwf	_add_d_hora,w,c
  3931  00093C  6E09               	movwf	i2grava_eeprom@address,c
  3932  00093E  6A0A               	clrf	i2grava_eeprom@address+1,c
  3933  000940  0E00               	movlw	0
  3934  000942  220A               	addwfc	i2grava_eeprom@address+1,f,c
  3935  000944  C03A  F001         	movff	_Hora,i2___awdiv@dividend
  3936  000948  6A02               	clrf	i2___awdiv@dividend+1,c
  3937  00094A  0E00               	movlw	0
  3938  00094C  6E04               	movwf	i2___awdiv@divisor+1,c
  3939  00094E  0E0A               	movlw	10
  3940  000950  6E03               	movwf	i2___awdiv@divisor,c
  3941  000952  ECC1  F005         	call	i2___awdiv	;wreg free
  3942  000956  5001               	movf	?i2___awdiv,w,c
  3943  000958  6E0B               	movwf	i2grava_eeprom@data,c
  3944  00095A  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3945                           
  3946                           ;funcs.c: 227: grava_eeprom(add_d_hora + 21, Hora%10);
  3947  00095E  0E15               	movlw	21
  3948  000960  242D               	addwf	_add_d_hora,w,c
  3949  000962  6E09               	movwf	i2grava_eeprom@address,c
  3950  000964  6A0A               	clrf	i2grava_eeprom@address+1,c
  3951  000966  0E00               	movlw	0
  3952  000968  220A               	addwfc	i2grava_eeprom@address+1,f,c
  3953  00096A  C03A  F001         	movff	_Hora,i2___awmod@dividend
  3954  00096E  6A02               	clrf	i2___awmod@dividend+1,c
  3955  000970  0E00               	movlw	0
  3956  000972  6E04               	movwf	i2___awmod@divisor+1,c
  3957  000974  0E0A               	movlw	10
  3958  000976  6E03               	movwf	i2___awmod@divisor,c
  3959  000978  EC3C  F006         	call	i2___awmod	;wreg free
  3960  00097C  5001               	movf	?i2___awmod,w,c
  3961  00097E  6E0B               	movwf	i2grava_eeprom@data,c
  3962  000980  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3963                           
  3964                           ;funcs.c: 228: grava_eeprom(add_d_hora + 22, Min/10);
  3965  000984  0E16               	movlw	22
  3966  000986  242D               	addwf	_add_d_hora,w,c
  3967  000988  6E09               	movwf	i2grava_eeprom@address,c
  3968  00098A  6A0A               	clrf	i2grava_eeprom@address+1,c
  3969  00098C  0E00               	movlw	0
  3970  00098E  220A               	addwfc	i2grava_eeprom@address+1,f,c
  3971  000990  C03B  F001         	movff	_Min,i2___awdiv@dividend
  3972  000994  6A02               	clrf	i2___awdiv@dividend+1,c
  3973  000996  0E00               	movlw	0
  3974  000998  6E04               	movwf	i2___awdiv@divisor+1,c
  3975  00099A  0E0A               	movlw	10
  3976  00099C  6E03               	movwf	i2___awdiv@divisor,c
  3977  00099E  ECC1  F005         	call	i2___awdiv	;wreg free
  3978  0009A2  5001               	movf	?i2___awdiv,w,c
  3979  0009A4  6E0B               	movwf	i2grava_eeprom@data,c
  3980  0009A6  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3981                           
  3982                           ;funcs.c: 229: grava_eeprom(add_d_hora + 23, Min%10);
  3983  0009AA  0E17               	movlw	23
  3984  0009AC  242D               	addwf	_add_d_hora,w,c
  3985  0009AE  6E09               	movwf	i2grava_eeprom@address,c
  3986  0009B0  6A0A               	clrf	i2grava_eeprom@address+1,c
  3987  0009B2  0E00               	movlw	0
  3988  0009B4  220A               	addwfc	i2grava_eeprom@address+1,f,c
  3989  0009B6  C03B  F001         	movff	_Min,i2___awmod@dividend
  3990  0009BA  6A02               	clrf	i2___awmod@dividend+1,c
  3991  0009BC  0E00               	movlw	0
  3992  0009BE  6E04               	movwf	i2___awmod@divisor+1,c
  3993  0009C0  0E0A               	movlw	10
  3994  0009C2  6E03               	movwf	i2___awmod@divisor,c
  3995  0009C4  EC3C  F006         	call	i2___awmod	;wreg free
  3996  0009C8  5001               	movf	?i2___awmod,w,c
  3997  0009CA  6E0B               	movwf	i2grava_eeprom@data,c
  3998  0009CC  EC1F  F007         	call	i2_grava_eeprom	;wreg free
  3999  0009D0  0012               	return		;funcret
  4000  0009D2                     __end_of_cadastra_relogio:
  4001                           	opt stack 0
  4002                           pclatu	equ	0xFFB
  4003                           pclath	equ	0xFFA
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           postinc0	equ	0xFEE
  4013                           fsr0h	equ	0xFEA
  4014                           fsr0l	equ	0xFE9
  4015                           wreg	equ	0xFE8
  4016                           indf1	equ	0xFE7
  4017                           postdec1	equ	0xFE5
  4018                           fsr1h	equ	0xFE2
  4019                           fsr1l	equ	0xFE1
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function i2_grava_eeprom *****************
  4027 ;; Defined at:
  4028 ;;		line 109 in file "funcs.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  address         2    8[COMRAM] int 
  4031 ;;  data            1   10[COMRAM] unsigned char 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4043 ;;      Params:         3       0       0       0       0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4045 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4046 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4047 ;;Total ram usage:        4 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		_atualiza_relogio_blue
  4053 ;;		_cadastra_relogio
  4054 ;;		_comunica
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text22
  4059  000E3E                     __ptext22:
  4060                           	opt stack 0
  4061  000E3E                     i2_grava_eeprom:
  4062                           	opt stack 25
  4063                           
  4064                           ;funcs.c: 112: EEADR = address;
  4065                           
  4066                           ;incstack = 0
  4067  000E3E  C009  FFA9         	movff	i2grava_eeprom@address,4009	;volatile
  4068                           
  4069                           ;funcs.c: 113: EEDATA = data;
  4070  000E42  C00B  FFA8         	movff	i2grava_eeprom@data,4008	;volatile
  4071                           
  4072                           ;funcs.c: 114: EECON1bits.EEPGD = 0;
  4073  000E46  9EA6               	bcf	4006,7,c	;volsfr
  4074                           
  4075                           ;funcs.c: 115: EECON1bits.CFGS = 0;
  4076  000E48  9CA6               	bcf	4006,6,c	;volsfr
  4077                           
  4078                           ;funcs.c: 116: EECON1bits.WREN = 1;
  4079  000E4A  84A6               	bsf	4006,2,c	;volsfr
  4080                           
  4081                           ;funcs.c: 117: INTCONbits.GIE = 0;
  4082  000E4C  9EF2               	bcf	intcon,7,c	;volatile
  4083                           
  4084                           ;funcs.c: 119: EECON2 = 0x55;
  4085  000E4E  0E55               	movlw	85
  4086  000E50  6EA7               	movwf	4007,c	;volsfr
  4087                           
  4088                           ;funcs.c: 120: EECON2 = 0xAA;
  4089  000E52  0EAA               	movlw	170
  4090  000E54  6EA7               	movwf	4007,c	;volsfr
  4091                           
  4092                           ;funcs.c: 122: EECON1bits.WR = 1;
  4093  000E56  82A6               	bsf	4006,1,c	;volsfr
  4094                           
  4095                           ;funcs.c: 123: INTCONbits.GIE = 1;
  4096  000E58  8EF2               	bsf	intcon,7,c	;volatile
  4097                           
  4098                           ;funcs.c: 125: PIR2bits.EEIF=0;
  4099  000E5A  98A1               	bcf	4001,4,c	;volatile
  4100                           
  4101                           ;funcs.c: 126: EECON1bits.CFGS = 1;
  4102  000E5C  8CA6               	bsf	4006,6,c	;volsfr
  4103                           
  4104                           ;funcs.c: 127: _delay((unsigned long)((10)*(48000000/4000.0)));
  4105  000E5E  0E9C               	movlw	156
  4106  000E60  6E0C               	movwf	??i2_grava_eeprom& (0+255),c
  4107  000E62  0ED7               	movlw	215
  4108  000E64                     i2u157_47:
  4109  000E64  2EE8               	decfsz	wreg,f,c
  4110  000E66  D7FE               	bra	i2u157_47
  4111  000E68  2E0C               	decfsz	??i2_grava_eeprom& (0+255),f,c
  4112  000E6A  D7FC               	bra	i2u157_47
  4113  000E6C  F000               	nop	
  4114  000E6E  0012               	return		;funcret
  4115  000E70                     __end_ofi2_grava_eeprom:
  4116                           	opt stack 0
  4117                           pclatu	equ	0xFFB
  4118                           pclath	equ	0xFFA
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           intcon2	equ	0xFF1
  4127                           postinc0	equ	0xFEE
  4128                           fsr0h	equ	0xFEA
  4129                           fsr0l	equ	0xFE9
  4130                           wreg	equ	0xFE8
  4131                           indf1	equ	0xFE7
  4132                           postdec1	equ	0xFE5
  4133                           fsr1h	equ	0xFE2
  4134                           fsr1l	equ	0xFE1
  4135                           indf2	equ	0xFDF
  4136                           postinc2	equ	0xFDE
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function i2___awmod *****************
  4142 ;; Defined at:
  4143 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  dividend        2    0[COMRAM] int 
  4146 ;;  divisor         2    2[COMRAM] int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  __awmod         1    5[COMRAM] unsigned char 
  4149 ;;  __awmod         1    4[COMRAM] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  2    0[COMRAM] int 
  4152 ;; Registers used:
  4153 ;;		wreg, status,2, status,0
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4159 ;;      Params:         4       0       0       0       0       0       0       0       0
  4160 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4162 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4163 ;;Total ram usage:        6 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_verifica
  4169 ;;		_cadastra_relogio
  4170 ;;		_envia_teste
  4171 ;;		_comunica
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text23
  4176  000C78                     __ptext23:
  4177                           	opt stack 0
  4178  000C78                     i2___awmod:
  4179                           	opt stack 25
  4180                           
  4181                           ;incstack = 0
  4182  000C78  0E00               	movlw	0
  4183  000C7A  6E06               	movwf	i2___awmod@sign,c
  4184  000C7C  AE02               	btfss	i2___awmod@dividend+1,7,c
  4185  000C7E  D006               	goto	i2l497
  4186  000C80  6C01               	negf	i2___awmod@dividend,c
  4187  000C82  1E02               	comf	i2___awmod@dividend+1,f,c
  4188  000C84  B0D8               	btfsc	status,0,c
  4189  000C86  2A02               	incf	i2___awmod@dividend+1,f,c
  4190  000C88  0E01               	movlw	1
  4191  000C8A  6E06               	movwf	i2___awmod@sign,c
  4192  000C8C                     i2l497:
  4193  000C8C  AE04               	btfss	i2___awmod@divisor+1,7,c
  4194  000C8E  D004               	goto	i2l498
  4195  000C90  6C03               	negf	i2___awmod@divisor,c
  4196  000C92  1E04               	comf	i2___awmod@divisor+1,f,c
  4197  000C94  B0D8               	btfsc	status,0,c
  4198  000C96  2A04               	incf	i2___awmod@divisor+1,f,c
  4199  000C98                     i2l498:
  4200  000C98  5003               	movf	i2___awmod@divisor,w,c
  4201  000C9A  1004               	iorwf	i2___awmod@divisor+1,w,c
  4202  000C9C  B4D8               	btfsc	status,2,c
  4203  000C9E  D018               	goto	i2l505
  4204  000CA0  0E01               	movlw	1
  4205  000CA2  6E05               	movwf	i2___awmod@counter,c
  4206  000CA4  D004               	goto	i2l500
  4207  000CA6  90D8               	bcf	status,0,c
  4208  000CA8  3603               	rlcf	i2___awmod@divisor,f,c
  4209  000CAA  3604               	rlcf	i2___awmod@divisor+1,f,c
  4210  000CAC  2A05               	incf	i2___awmod@counter,f,c
  4211  000CAE                     i2l500:
  4212  000CAE  AE04               	btfss	i2___awmod@divisor+1,7,c
  4213  000CB0  D7FA               	goto	i2l501
  4214  000CB2                     i2u92_40:
  4215  000CB2  5003               	movf	i2___awmod@divisor,w,c
  4216  000CB4  5C01               	subwf	i2___awmod@dividend,w,c
  4217  000CB6  5004               	movf	i2___awmod@divisor+1,w,c
  4218  000CB8  5802               	subwfb	i2___awmod@dividend+1,w,c
  4219  000CBA  A0D8               	btfss	status,0,c
  4220  000CBC  D004               	goto	i2l504
  4221  000CBE  5003               	movf	i2___awmod@divisor,w,c
  4222  000CC0  5E01               	subwf	i2___awmod@dividend,f,c
  4223  000CC2  5004               	movf	i2___awmod@divisor+1,w,c
  4224  000CC4  5A02               	subwfb	i2___awmod@dividend+1,f,c
  4225  000CC6                     i2l504:
  4226  000CC6  90D8               	bcf	status,0,c
  4227  000CC8  3204               	rrcf	i2___awmod@divisor+1,f,c
  4228  000CCA  3203               	rrcf	i2___awmod@divisor,f,c
  4229  000CCC  2E05               	decfsz	i2___awmod@counter,f,c
  4230  000CCE  D7F1               	goto	i2u92_40
  4231  000CD0                     i2l505:
  4232  000CD0  5006               	movf	i2___awmod@sign,w,c
  4233  000CD2  B4D8               	btfsc	status,2,c
  4234  000CD4  D004               	goto	i2l506
  4235  000CD6  6C01               	negf	i2___awmod@dividend,c
  4236  000CD8  1E02               	comf	i2___awmod@dividend+1,f,c
  4237  000CDA  B0D8               	btfsc	status,0,c
  4238  000CDC  2A02               	incf	i2___awmod@dividend+1,f,c
  4239  000CDE                     i2l506:
  4240  000CDE  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4241  000CE2  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4242  000CE6  0012               	return	
  4243  000CE8                     __end_ofi2___awmod:
  4244                           	opt stack 0
  4245                           pclatu	equ	0xFFB
  4246                           pclath	equ	0xFFA
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           intcon2	equ	0xFF1
  4255                           postinc0	equ	0xFEE
  4256                           fsr0h	equ	0xFEA
  4257                           fsr0l	equ	0xFE9
  4258                           wreg	equ	0xFE8
  4259                           indf1	equ	0xFE7
  4260                           postdec1	equ	0xFE5
  4261                           fsr1h	equ	0xFE2
  4262                           fsr1l	equ	0xFE1
  4263                           indf2	equ	0xFDF
  4264                           postinc2	equ	0xFDE
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function i2___awdiv *****************
  4270 ;; Defined at:
  4271 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  dividend        2    0[COMRAM] int 
  4274 ;;  divisor         2    2[COMRAM] int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  __awdiv         2    6[COMRAM] int 
  4277 ;;  __awdiv         1    5[COMRAM] unsigned char 
  4278 ;;  __awdiv         1    4[COMRAM] unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2    0[COMRAM] int 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4288 ;;      Params:         4       0       0       0       0       0       0       0       0
  4289 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4291 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4292 ;;Total ram usage:        8 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_verifica
  4298 ;;		_cadastra_relogio
  4299 ;;		_envia_teste
  4300 ;;		_comunica
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text24
  4305  000B82                     __ptext24:
  4306                           	opt stack 0
  4307  000B82                     i2___awdiv:
  4308                           	opt stack 25
  4309                           
  4310                           ;incstack = 0
  4311  000B82  0E00               	movlw	0
  4312  000B84  6E06               	movwf	i2___awdiv@sign,c
  4313  000B86  AE04               	btfss	i2___awdiv@divisor+1,7,c
  4314  000B88  D006               	goto	i2l484
  4315  000B8A  6C03               	negf	i2___awdiv@divisor,c
  4316  000B8C  1E04               	comf	i2___awdiv@divisor+1,f,c
  4317  000B8E  B0D8               	btfsc	status,0,c
  4318  000B90  2A04               	incf	i2___awdiv@divisor+1,f,c
  4319  000B92  0E01               	movlw	1
  4320  000B94  6E06               	movwf	i2___awdiv@sign,c
  4321  000B96                     i2l484:
  4322  000B96  AE02               	btfss	i2___awdiv@dividend+1,7,c
  4323  000B98  D006               	goto	i2l485
  4324  000B9A  6C01               	negf	i2___awdiv@dividend,c
  4325  000B9C  1E02               	comf	i2___awdiv@dividend+1,f,c
  4326  000B9E  B0D8               	btfsc	status,0,c
  4327  000BA0  2A02               	incf	i2___awdiv@dividend+1,f,c
  4328  000BA2  0E01               	movlw	1
  4329  000BA4  1A06               	xorwf	i2___awdiv@sign,f,c
  4330  000BA6                     i2l485:
  4331  000BA6  0E00               	movlw	0
  4332  000BA8  6E08               	movwf	i2___awdiv@quotient+1,c
  4333  000BAA  0E00               	movlw	0
  4334  000BAC  6E07               	movwf	i2___awdiv@quotient,c
  4335  000BAE  5003               	movf	i2___awdiv@divisor,w,c
  4336  000BB0  1004               	iorwf	i2___awdiv@divisor+1,w,c
  4337  000BB2  B4D8               	btfsc	status,2,c
  4338  000BB4  D01C               	goto	i2l492
  4339  000BB6  0E01               	movlw	1
  4340  000BB8  6E05               	movwf	i2___awdiv@counter,c
  4341  000BBA  D004               	goto	i2l487
  4342  000BBC  90D8               	bcf	status,0,c
  4343  000BBE  3603               	rlcf	i2___awdiv@divisor,f,c
  4344  000BC0  3604               	rlcf	i2___awdiv@divisor+1,f,c
  4345  000BC2  2A05               	incf	i2___awdiv@counter,f,c
  4346  000BC4                     i2l487:
  4347  000BC4  AE04               	btfss	i2___awdiv@divisor+1,7,c
  4348  000BC6  D7FA               	goto	i2l488
  4349  000BC8                     i2u86_40:
  4350  000BC8  90D8               	bcf	status,0,c
  4351  000BCA  3607               	rlcf	i2___awdiv@quotient,f,c
  4352  000BCC  3608               	rlcf	i2___awdiv@quotient+1,f,c
  4353  000BCE  5003               	movf	i2___awdiv@divisor,w,c
  4354  000BD0  5C01               	subwf	i2___awdiv@dividend,w,c
  4355  000BD2  5004               	movf	i2___awdiv@divisor+1,w,c
  4356  000BD4  5802               	subwfb	i2___awdiv@dividend+1,w,c
  4357  000BD6  A0D8               	btfss	status,0,c
  4358  000BD8  D005               	goto	i2l491
  4359  000BDA  5003               	movf	i2___awdiv@divisor,w,c
  4360  000BDC  5E01               	subwf	i2___awdiv@dividend,f,c
  4361  000BDE  5004               	movf	i2___awdiv@divisor+1,w,c
  4362  000BE0  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  4363  000BE2  8007               	bsf	i2___awdiv@quotient,0,c
  4364  000BE4                     i2l491:
  4365  000BE4  90D8               	bcf	status,0,c
  4366  000BE6  3204               	rrcf	i2___awdiv@divisor+1,f,c
  4367  000BE8  3203               	rrcf	i2___awdiv@divisor,f,c
  4368  000BEA  2E05               	decfsz	i2___awdiv@counter,f,c
  4369  000BEC  D7ED               	goto	i2u86_40
  4370  000BEE                     i2l492:
  4371  000BEE  5006               	movf	i2___awdiv@sign,w,c
  4372  000BF0  B4D8               	btfsc	status,2,c
  4373  000BF2  D004               	goto	i2l493
  4374  000BF4  6C07               	negf	i2___awdiv@quotient,c
  4375  000BF6  1E08               	comf	i2___awdiv@quotient+1,f,c
  4376  000BF8  B0D8               	btfsc	status,0,c
  4377  000BFA  2A08               	incf	i2___awdiv@quotient+1,f,c
  4378  000BFC                     i2l493:
  4379  000BFC  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  4380  000C00  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  4381  000C04  0012               	return	
  4382  000C06                     __end_ofi2___awdiv:
  4383                           	opt stack 0
  4384  0000                     pclatu	equ	0xFFB
  4385                           pclath	equ	0xFFA
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           intcon2	equ	0xFF1
  4394                           postinc0	equ	0xFEE
  4395                           fsr0h	equ	0xFEA
  4396                           fsr0l	equ	0xFE9
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           postdec1	equ	0xFE5
  4400                           fsr1h	equ	0xFE2
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           pclatu	equ	0xFFB
  4408                           pclath	equ	0xFFA
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           intcon2	equ	0xFF1
  4417                           postinc0	equ	0xFEE
  4418                           fsr0h	equ	0xFEA
  4419                           fsr0l	equ	0xFE9
  4420                           wreg	equ	0xFE8
  4421                           indf1	equ	0xFE7
  4422                           postdec1	equ	0xFE5
  4423                           fsr1h	equ	0xFE2
  4424                           fsr1l	equ	0xFE1
  4425                           indf2	equ	0xFDF
  4426                           postinc2	equ	0xFDE
  4427                           fsr2h	equ	0xFDA
  4428                           fsr2l	equ	0xFD9
  4429                           status	equ	0xFD8
  4430                           
  4431                           	psect	rparam
  4432  0000                     pclatu	equ	0xFFB
  4433                           pclath	equ	0xFFA
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           intcon	equ	0xFF2
  4441                           intcon2	equ	0xFF1
  4442                           postinc0	equ	0xFEE
  4443                           fsr0h	equ	0xFEA
  4444                           fsr0l	equ	0xFE9
  4445                           wreg	equ	0xFE8
  4446                           indf1	equ	0xFE7
  4447                           postdec1	equ	0xFE5
  4448                           fsr1h	equ	0xFE2
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456                           	psect	temp
  4457  00003C                     btemp:
  4458                           	opt stack 0
  4459  00003C                     	ds	1
  4460  0000                     int$flags	set	btemp
  4461  0000                     wtemp6	set	btemp+1
  4462                           pclatu	equ	0xFFB
  4463                           pclath	equ	0xFFA
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           prodh	equ	0xFF4
  4469                           prodl	equ	0xFF3
  4470                           intcon	equ	0xFF2
  4471                           intcon2	equ	0xFF1
  4472                           postinc0	equ	0xFEE
  4473                           fsr0h	equ	0xFEA
  4474                           fsr0l	equ	0xFE9
  4475                           wreg	equ	0xFE8
  4476                           indf1	equ	0xFE7
  4477                           postdec1	equ	0xFE5
  4478                           fsr1h	equ	0xFE2
  4479                           fsr1l	equ	0xFE1
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         38
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      59
    BANK0           160     18      38
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _serial in COMRAM

    _serial->_comunica
    _verifica->i2___awdiv
    _envia_teste->i2___awdiv
    _envia_dados_da_memoria->_enviaDados
    _comunica->_atualiza_relogio_blue
    _atualiza_relogio_blue->i2_grava_eeprom
    _cadastra_relogio->i2_grava_eeprom
    i2_grava_eeprom->i2___awdiv

Critical Paths under _main in BANK0

    _main->_aciona
    _atualiza_variaveis->_le_eeprom
    _atualiza_relogio->_le_eeprom
    _aciona->_atualiza_remedio
    _atualiza_remedio->_grava_eeprom
    _grava_eeprom->___awdiv

Critical Paths under _serial in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _serial in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _serial in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _serial in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _serial in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _serial in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _serial in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _serial in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9482
                             _aciona
                   _atualiza_relogio
                 _atualiza_variaveis
                      _configura_pic
                     _configura_uart
                     _controle_servo
 ---------------------------------------------------------------------------------
 (1) _configura_uart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configura_pic                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualiza_variaveis                                   1     1      0    1439
                                              2 BANK0      1     1      0
                          _le_eeprom
 ---------------------------------------------------------------------------------
 (1) _atualiza_relogio                                     0     0      0    1061
                          _le_eeprom
 ---------------------------------------------------------------------------------
 (2) _le_eeprom                                            2     0      2    1061
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _aciona                                               1     1      0    6872
                                             17 BANK0      1     1      0
                   _atualiza_remedio
                     _controle_servo
 ---------------------------------------------------------------------------------
 (1) _controle_servo                                       3     3      0     110
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _atualiza_remedio                                     5     5      0    6762
                                             12 BANK0      5     5      0
                            ___awdiv
                            ___awmod
                       _grava_eeprom
 ---------------------------------------------------------------------------------
 (3) _grava_eeprom                                         4     1      3    1522
                                              8 BANK0      4     1      3
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2363
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2375
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _serial                                              19    19      0    9202
                                             16 COMRAM    19    19      0
                   _cadastra_relogio
                           _comunica
                        _envia_teste
                     _incrementa_min
                           _verifica
 ---------------------------------------------------------------------------------
 (5) _verifica                                             3     3      0    1896
                                              8 COMRAM     3     3      0
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (5) _incrementa_min                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _envia_teste                                          0     0      0    1918
                         _enviaDados
             _envia_dados_da_memoria
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) _envia_dados_da_memoria                               1     1      0     156
                                              1 COMRAM     1     1      0
                         _enviaDados
 ---------------------------------------------------------------------------------
 (7) _enviaDados                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _comunica                                             1     1      0    3084
                                             15 COMRAM     1     1      0
              _atualiza_relogio_blue
                          i2___awdiv
                          i2___awmod
                     i2_grava_eeprom
 ---------------------------------------------------------------------------------
 (6) _atualiza_relogio_blue                                3     3      0     780
                                             12 COMRAM     3     3      0
                     i2_grava_eeprom
                        i2_le_eeprom
 ---------------------------------------------------------------------------------
 (7) i2_le_eeprom                                          2     0      2     126
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _cadastra_relogio                                     0     0      0    2304
                          i2___awdiv
                          i2___awmod
                     i2_grava_eeprom
 ---------------------------------------------------------------------------------
 (6) i2_grava_eeprom                                       4     1      3     564
                                              8 COMRAM     4     1      3
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     868
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     872
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _aciona
     _atualiza_remedio
       ___awdiv
       ___awmod
       _grava_eeprom
         ___awdiv (ARG)
         ___awmod (ARG)
     _controle_servo
   _atualiza_relogio
     _le_eeprom
   _atualiza_variaveis
     _le_eeprom
   _configura_pic
   _configura_uart
   _controle_servo

 _serial (ROOT)
   _cadastra_relogio
     i2___awdiv
     i2___awmod
     i2_grava_eeprom
       i2___awdiv (ARG)
       i2___awmod (ARG)
   _comunica
     _atualiza_relogio_blue
       i2_grava_eeprom
         i2___awdiv (ARG)
         i2___awmod (ARG)
       i2_le_eeprom
     i2___awdiv
     i2___awmod
     i2_grava_eeprom
       i2___awdiv (ARG)
       i2___awmod (ARG)
   _envia_teste
     _enviaDados
     _envia_dados_da_memoria
       _enviaDados
     i2___awdiv
     i2___awmod
   _incrementa_min
   _verifica
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      26       5       23.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3B       1       62.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61      20        0.0%
DATA                 0      0      61       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Dec 19 14:36:00 2018

                              _i 0035                               l53 0E80  
                   ___awdiv@sign 0079                      __CFG_BOR$ON 000000  
                             _in 0034                   ?_configura_pic 0001  
                    __CFG_BORV$3 000000                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_LVP$ON 000000  
        __size_of_controle_servo 012A                              l214 0D4E  
                            l230 07AA                              l241 05D0  
                            l217 0D72                              l218 0D6C  
                            l235 036A                              l243 060C  
                            l500 0C3E                              l501 0C36  
                            l245 0648                              l239 0598  
                            l504 0C56                              l505 0C60  
                            l506 0C6E                              l491 0B60  
                            l492 0B6A                              l484 0B12  
                            l493 0B78                              l485 0B22  
                            l487 0B40                              l488 0B38  
                            l497 0C1C                              l498 0C28  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Min 003B                              _led 0030  
                            _seg 002E                  ?_configura_uart 0001  
                   ___awmod@sign 0079                              prod 000FF3  
                            wreg 000FE8                     __CFG_WDT$OFF 000000  
                           l2108 0D46                             l2096 07A2  
                           u1300 0C42                             u1240 0B44  
                           u1430 0D88                             u1440 0D8C  
                           u1507 05E4                             u1517 05FC  
                           u1527 0620                             u1537 0638  
                           u1547 065C                             u1467 0570  
                           u1557 0674                             u1477 0588  
                           u1567 0E34                             u1487 05AA  
                           u1497 05C0                             _RCIF 007CF5  
                           _RBPU 007F8F                             _TMR0 000FD6  
                           _TXIF 007CF4                             _Hora 003A  
                           _dado 0031                             _flag 0032  
                           _main 0E70                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 003C  
                   ?_envia_teste 0001                             prodh 000FF4  
                           prodl 000FF3                             start 000E  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000                    __CFG_PLLDIV$1 000000  
                 __CFG_CCP2MX$ON 000000                     _add_d_minuto 0038  
                    i2_le_eeprom 0EDA                            ?_main 0001  
                __end_of___awdiv 0B82                            _EEADR 000FA9  
                __end_of___awmod 0C78                            _T0CON 000FD5  
                ___awdiv@divisor 0076                            i2l310 050E  
                          i2l302 048C                            i2l223 0690  
                          i2l303 0484                            i2l305 04A4  
                          i2l314 0A74                            i2l226 0798  
                          i2l306 04B8                            i2l500 0CAE  
                          i2l308 04E4                            i2l501 0CA6  
                          i2l504 0CC6                            i2l505 0CD0  
                          i2l506 0CDE                            i2l283 09DE  
                          i2l294 0020                            i2l296 00FC  
                          i2l491 0BE4                            i2l492 0BEE  
                          i2l484 0B96                            i2l493 0BFC  
                          i2l485 0BA6                            i2l487 0BC4  
                          i2l488 0BBC                            i2l497 0C8C  
                          i2l498 0C98                  ___awdiv@counter 0078  
                          _RCREG 000FAE                            _RCSTA 000FAB  
                          _SPBRG 000FAF                            _PORTA 000F80  
                  __CFG_USBDIV$1 000000                            _TRISB 000F93  
   envia_dados_da_memoria@indice 0002                            _TXREG 000FAD  
                          _TXSTA 000FAC                    __CFG_PWRT$OFF 000000  
              ?_cadastra_relogio 0001                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
             ??_cadastra_relogio 000D                ?_atualiza_remedio 0001  
                          _botao 002F                ?_atualiza_relogio 0001  
             ??_atualiza_remedio 0080                            pclath 000FFA  
             ??_atualiza_relogio 0024                            tablat 000FF5  
                  ?_grava_eeprom 007C                            status 000FD8  
                          wtemp6 003D                     _add_u_minuto 0037  
                 __CFG_ICPRT$OFF 000000       __end_of_atualiza_variaveis 0878  
             __size_ofi2___awdiv 0084               __size_ofi2___awmod 0070  
                 __CFG_PBADEN$ON 000000                  __initialization 0D98  
                   __end_of_main 0E92                  ??_configura_pic 0024  
                         ??_main 0024                    __activetblptr 000000  
                  verifica@count 000B                           _ADCON1 000FC1  
               ??i2_grava_eeprom 000C                           _EEDATA 000FA8  
                         _EECON2 000FA7                 ___awdiv@dividend 0074  
                         _INT0IE 007F94                           _INT0IF 007F91  
                 ??_grava_eeprom 007F                           i2l1620 09D6  
                         i2l1492 0EEA                           i2l1638 0A6C  
                         i2l1794 0798                           i2l1778 0688  
                         _INTCON 000FF2                           _TMR0IF 007F92  
                         _TMR0ON 007EAF                _pendencia_remedio 0029  
                 __CFG_XINST$OFF 000000                 __end_of_comunica 0256  
                         _aciona 0D42                        ??___awdiv 0024  
                 __CFG_STVREN$ON 000000                        ??___awmod 0024  
                         _libera 0033                           clear_0 0DBE  
                         clear_1 0DCA                 ___awdiv@quotient 007A  
                ___awmod@divisor 0076                           _serial 0008  
                ___awmod@counter 0078                   _controle_servo 055A  
                         _string 0024                   i2___awdiv@sign 0006  
             i2grava_eeprom@data 000B                     __pdataCOMRAM 0036  
              __end_ofi2___awdiv 0C06                __end_ofi2___awmod 0CE8  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_verifica 079C  
                 i2___awmod@sign 0006          __size_of_incrementa_min 001E  
          _atualiza_relogio_blue 09D2                       __accesstop 0060  
        __end_of__initialization 0DD0                    ___rparam_used 000001  
        atualiza_variaveis@count 0076             __size_of_envia_teste 00C0  
         atualiza_relogio_blue@i 000F                   __pcstackCOMRAM 0001  
       ??_envia_dados_da_memoria 0002                       _add_d_hora 002D  
         __end_of_controle_servo 0684                 ??_configura_uart 0024  
                     _add_u_hora 0039               __size_of_le_eeprom 000E  
                     __pbssBANK0 0060                       __pnvCOMRAM 003A  
                        ?_aciona 0001                  ?_controle_servo 0001  
           __end_of_grava_eeprom 0E3E                          ?_serial 0001  
                   ?i2_le_eeprom 0001                          _INTEDG0 007F8E  
                        i2u80_40 0A16                          i2u92_40 0CB2  
                        i2u86_40 0BC8           ?_atualiza_relogio_blue 0001  
                      ?_comunica 0001                  __CFG_VREGEN$OFF 000000  
                     _enviaDados 0EE8        __size_of_cadastra_relogio 009A  
                        __Hparam 0000                          __Lparam 0000  
      __size_of_atualiza_remedio 01BE        __size_of_atualiza_relogio 005A  
              __end_of_le_eeprom 0EDA  __size_of_envia_dados_da_memoria 0094  
                      ?_verifica 0001                          ___awdiv 0AFC  
                        ___awmod 0C06                  __size_of_aciona 0056  
                        __pcinit 0D98                          __ramtop 0800  
             _atualiza_variaveis 079C                          __ptext0 0E70  
                        __ptext1 0EB0                          __ptext2 0DDA  
                __size_of_serial 0552                          __ptext3 079C  
                        __ptext4 0CE8                          __ptext5 0ECC  
                        __ptext6 0D42                          __ptext7 055A  
                        __ptext8 0256                          __ptext9 0E0C  
               le_eeprom@address 0074                 ___awmod@dividend 0074  
                        _remedio 0060              ?_atualiza_variaveis 0001  
                 _incrementa_min 0E92                   __pintcode_body 0414  
           end_of_initialization 0DD0                       ??_comunica 0010  
                        int_func 0414             ??_atualiza_variaveis 0024  
                        postdec1 000FE5                          postinc0 000FEE  
                        postinc2 000FDE                       ??_verifica 0009  
          __end_of_configura_pic 0E0C                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTDbits 000F83  
         __end_of_incrementa_min 0EB0                        _TRISAbits 000F92  
                      _TRISCbits 000F94                        _TRISDbits 000F95  
         _envia_dados_da_memoria 0A68                        i2___awdiv 0B82  
                      i2___awmod 0C78                      ?_enviaDados 0001  
             i2___awdiv@dividend 0001            __size_of_grava_eeprom 0032  
          atualiza_remedio@dados 0083            atualiza_remedio@count 0084  
                 __end_of_aciona 0D98                    __pidataCOMRAM 0EF4  
                 __end_of_serial 055A             __size_ofi2_le_eeprom 000E  
            start_initialization 0D98                  ?_incrementa_min 0001  
             i2___awdiv@quotient 0007                       ?i2___awdiv 0001  
                     ?i2___awmod 0001                     _grava_eeprom 0E0C  
                  ??_envia_teste 0009                 _cadastra_relogio 0938  
        __size_ofi2_grava_eeprom 0032                 ??_controle_servo 0074  
               _atualiza_remedio 0256                 _atualiza_relogio 0CE8  
                       ??_aciona 0085                 __CFG_LPT1OSC$OFF 000000  
                       ??_serial 0011              __size_of_enviaDados 000C  
                    __pbssCOMRAM 0024          ??_atualiza_relogio_blue 000D  
                  __pcstackBANK0 0074                        _add_passo 0036  
              __size_of_comunica 0244                        __pintcode 0008  
            __end_of_envia_teste 0938                         ?___awdiv 0074  
                       ?___awmod 0074                __size_of_verifica 0118  
                      _le_eeprom 0ECC          __size_of_configura_uart 001C  
                    ??i2___awdiv 0005                      ??i2___awmod 0005  
                enviaDados@dados 0001                         _LATBbits 000F8A  
                       _PIE1bits 000F9D                         i2u118_40 04D2  
                       i2u118_46 04D4                         i2u157_47 0E64  
                       _PIR1bits 000F9E                         _PIR2bits 000FA1  
                       _RCONbits 000FD0                 __CFG_WDTPS$32768 000000  
                     ?_le_eeprom 0074          ?_envia_dados_da_memoria 0001  
              i2___awdiv@divisor 0003                i2___awdiv@counter 0005  
          i2grava_eeprom@address 0009                        copy_data0 0DAC  
             i2le_eeprom@address 0001               i2___awmod@dividend 0001  
                   ??_enviaDados 0001                      _envia_teste 0878  
                     _EECON1bits 000FA6                   i2_grava_eeprom 0E3E  
                       __Hrparam 0000                         __Lrparam 0000  
    __size_of_atualiza_variaveis 00DC                 __size_of___awdiv 0086  
               __size_of___awmod 0072                 ??_incrementa_min 0001  
 __end_of_envia_dados_da_memoria 0AFC         __end_of_cadastra_relogio 09D2  
             __end_of_enviaDados 0EF4         __end_of_atualiza_remedio 0414  
       __end_of_atualiza_relogio 0D42                         __ptext10 0C06  
                       __ptext11 0AFC                         __ptext20 0EDA  
                       __ptext21 0938                         __ptext13 0684  
                       __ptext22 0E3E                         __ptext14 0E92  
                       __ptext23 0C78                         __ptext15 0878  
                       __ptext24 0B82                         __ptext16 0A68  
                       __ptext17 0EE8                         __ptext18 0012  
                       __ptext19 09D2                         _comunica 0012  
         __size_of_configura_pic 0032           __end_ofi2_grava_eeprom 0E70  
                  __size_of_main 0022                 grava_eeprom@data 007E  
                       int$flags 003C                         _verifica 0684  
                  ??i2_le_eeprom 0003                      ??_le_eeprom 0024  
          __CFG_CPUDIV$OSC1_PLL2 000000                i2___awmod@divisor 0003  
              i2___awmod@counter 0005                       _INTCONbits 000FF2  
                 _configura_uart 0EB0   __size_of_atualiza_relogio_blue 0096  
  __end_of_atualiza_relogio_blue 0A68                         intlevel2 0000  
                ?i2_grava_eeprom 0009                    _configura_pic 0DDA  
controle_servo@numero_do_remedio 0076           __end_of_configura_uart 0ECC  
            __end_ofi2_le_eeprom 0EE8              grava_eeprom@address 007C  
             __CFG_FOSC$HSPLL_HS 000000  
